[
    {
        "id": "c1216b540b10bca8",
        "type": "tab",
        "label": "Main Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ee81bdc633abbb7c",
        "type": "tab",
        "label": "Devices Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d4a5412a5158fcee",
        "type": "tab",
        "label": "Annotations Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "676aeb444dcdd8d6",
        "type": "tab",
        "label": "Notifications Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "359c38d245e1747d",
        "type": "subflow",
        "name": "Ping device",
        "info": "Pings a device once when `msg` is recievied. \nIt outputs only when status changes.\nAfter a specified amount of attempts, it considers the device as disconnected.\n\n\nA recurring inject as input is recommended.\n\nIt use enviroment flow variables to keep track of the failed attempts.\nIf there is any need to reset them send a `msg.reset`.\n\n## inputs\n`msg.ip` the Ip to ping\n\n## enviroment variables\n`Ping attempts` how may failed ping for a device to be considered down.\n\n`Ping timeout` maximum time allowed for a single ping response.\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 160,
                "wires": [
                    {
                        "id": "0e50394171291fdd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1500,
                "y": 160,
                "wires": [
                    {
                        "id": "93f6cb1d2294f113",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "max_failed_ping",
                "type": "num",
                "value": "5",
                "ui": {
                    "icon": "font-awesome/fa-retweet",
                    "label": {
                        "en-US": "Ping attempts"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "max_response_time",
                "type": "num",
                "value": "1",
                "ui": {
                    "icon": "font-awesome/fa-clock-o",
                    "label": {
                        "en-US": "Ping timeout"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "outputLabels": [
            "connection status changed"
        ],
        "icon": "font-awesome/fa-wifi"
    },
    {
        "id": "36160a387bc59014",
        "type": "subflow",
        "name": "Send historical data",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "0bf4167d8ce8f656",
        "type": "subflow",
        "name": "Fertilizer Widget",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 140,
                "wires": [
                    {
                        "id": "d95133b784dcb418"
                    },
                    {
                        "id": "4291f2ca80e9b95c"
                    },
                    {
                        "id": "791c45a53ad1e96e"
                    },
                    {
                        "id": "bc937e1c8e734b5f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 160,
                "wires": [
                    {
                        "id": "7c0913d2517dc02d",
                        "port": 0
                    },
                    {
                        "id": "a27dd90e355e6c82",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "group",
                "type": "ui-group",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Group"
                    },
                    "type": "conf-types"
                }
            }
        ],
        "meta": {},
        "color": "#A6BBCF",
        "icon": "@flowfuse/node-red-dashboard/ui-gauge.svg"
    },
    {
        "id": "2420f75c4c01f1de",
        "type": "subflow",
        "name": "build message when threshold",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "a5e2a8226152358e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1260,
                "y": 80,
                "wires": [
                    {
                        "id": "a80f580ab215d124",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "value_path",
                "type": "str",
                "value": "msg.payload[0].value",
                "ui": {
                    "icon": "font-awesome/fa-cube",
                    "label": {
                        "en-US": "Path of value"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "unit_path",
                "type": "str",
                "value": "msg.payload[1].unit",
                "ui": {
                    "icon": "font-awesome/fa-cube",
                    "label": {
                        "en-US": "Path of Measurement Unit"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "min",
                "type": "num",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-chevron-left",
                    "label": {
                        "en-US": "Min value"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "max",
                "type": "num",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-chevron-right",
                    "label": {
                        "en-US": "Max value"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "title",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-commenting-o",
                    "label": {
                        "en-US": "Message Title"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "subtitle_below",
                "type": "str",
                "value": "value is too low!",
                "ui": {
                    "icon": "font-awesome/fa-commenting-o",
                    "label": {
                        "en-US": "Message Subtitle (Too Low)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "subtitle_above",
                "type": "str",
                "value": "value is too high!",
                "ui": {
                    "icon": "font-awesome/fa-commenting-o",
                    "label": {
                        "en-US": "Message Subtitle (Too High)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "780f7e06d7eb6c70",
        "type": "subflow",
        "name": "Sensor Reading Filter",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 140,
                "wires": [
                    {
                        "id": "5c6b417bcc6b87a7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 140,
                "wires": [
                    {
                        "id": "5c6b417bcc6b87a7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "device_name",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-cubes",
                    "label": {
                        "en-US": "Device"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "sensor_name",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-cube",
                    "label": {
                        "en-US": "Sensor"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "description",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-thermometer-three-quarters",
                    "label": {
                        "en-US": "Description"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6b5ddb850b89560b",
        "type": "subflow",
        "name": "send command",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 200,
                "wires": [
                    {
                        "id": "6162d53105800a08"
                    },
                    {
                        "id": "248aa941843972b9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1180,
                "y": 400,
                "wires": [
                    {
                        "id": "f10419f25dd3120d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1180,
                "y": 440,
                "wires": [
                    {
                        "id": "20d7ebb62d98410e",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1170,
                "y": 480,
                "wires": [
                    {
                        "id": "0b075743d6b61e47",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "device_name",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-address-book-o",
                    "label": {
                        "en-US": "Device name"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "request_title",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-font",
                    "label": {
                        "en-US": "Request title"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "request_body",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-align-left",
                    "label": {
                        "en-US": "Request body"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "time_out",
                "type": "env",
                "value": "command_timeout_default",
                "ui": {
                    "icon": "font-awesome/fa-clock-o",
                    "label": {
                        "en-US": "Time out (milliseconds)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "send_notification",
                "type": "bool",
                "value": "true",
                "ui": {
                    "icon": "font-awesome/fa-send-o",
                    "label": {
                        "en-US": "Notify if failed"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "timed out",
            "success",
            "error"
        ],
        "status": {
            "x": 1400,
            "y": 100,
            "wires": [
                {
                    "id": "0f646184c2ec863a",
                    "port": 0
                },
                {
                    "id": "7707ce95d0d1ac52",
                    "port": 0
                },
                {
                    "id": "ec2babcf300bc133",
                    "port": 0
                },
                {
                    "id": "7dedba989a1e13c0",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "6ee0f2ea30d16015",
        "type": "group",
        "z": "ee81bdc633abbb7c",
        "name": "Logs",
        "style": {
            "label": true
        },
        "nodes": [
            "414af9307474f2a1",
            "82147f80b2c75522",
            "391ae12ed4a7b0e2",
            "deb89b962cb09b1f",
            "2fcc0687bdb5d803",
            "7abd6b45c1dbde94",
            "b146011714b99278",
            "f615aafcb596a09f",
            "9d93ccae9a87a8cb",
            "9ab1c98b857bccdb",
            "b572cca0a6301eb6",
            "5e680a35797c35f1",
            "4d349e0150b2b9c7",
            "31775a8d2966e405",
            "100a9cce790400d9",
            "4e4e1632513b4d63",
            "987937d9ea360e06",
            "ee31fc11feb98c6f",
            "28c2db5d0dc1d0ff",
            "4ac5b25054f597d1"
        ],
        "x": 494,
        "y": 939,
        "w": 1472,
        "h": 402
    },
    {
        "id": "93e67b0b85b043db",
        "type": "group",
        "z": "ee81bdc633abbb7c",
        "name": "Devices",
        "style": {
            "label": true
        },
        "nodes": [
            "b6e576c423d17e0e",
            "47aa2548892ad64b",
            "2bab0d35542d4c97",
            "6262935c1e644e12",
            "c53fe9c78fbecbb5",
            "d8902c387ec08295",
            "f7b02a75715d89c7",
            "2ca8d64e539640d4"
        ],
        "x": 494,
        "y": 619,
        "w": 1012,
        "h": 182
    },
    {
        "id": "1d1fafd1b71a623e",
        "type": "group",
        "z": "ee81bdc633abbb7c",
        "name": "test connection button",
        "style": {
            "label": true
        },
        "nodes": [
            "0b07ac6e6a6011c1",
            "fa11bde20c28b2aa",
            "8c437da80f926e1f",
            "18b19fbea247bf9d",
            "72c4ae743e0ca41e",
            "3ba075ea10e47e4c",
            "a08310a7497b1be0"
        ],
        "x": 1594,
        "y": 599,
        "w": 842,
        "h": 149.5
    },
    {
        "id": "d882671d10d4cb66",
        "type": "group",
        "z": "ee81bdc633abbb7c",
        "name": "delete device button",
        "style": {
            "label": true
        },
        "nodes": [
            "b24b816177f26408",
            "207b284ba2406f6f",
            "3a160629b930d6d6",
            "a52667df0de6d124",
            "c3b2aef9a78e6123",
            "c1e8cdf8acd8fac9",
            "8fbf7e5a85b9c656",
            "4543bd88333bcea0",
            "758066b4c68477e3",
            "556088067bcb5e5c",
            "5cd941b378bbb25e"
        ],
        "x": 1594,
        "y": 739,
        "w": 1212,
        "h": 182
    },
    {
        "id": "2571277fd6cbec46",
        "type": "group",
        "z": "ee81bdc633abbb7c",
        "name": "Check devices connection",
        "style": {
            "label": true
        },
        "nodes": [
            "c41f06f648f27de2",
            "6266358aa74a06d2",
            "2183da352f4f327e",
            "a944c7b7bc78a88d",
            "7c1c8254453be3ab",
            "d44c280d8db4ac3e",
            "555c459240d9662f",
            "ee1d9aa6362be3b7",
            "8207ba428040e831",
            "3ab5996895465c92",
            "625d40dddc9ab3bd",
            "a60ad0e2e057d250"
        ],
        "x": 14,
        "y": 379,
        "w": 1552,
        "h": 182
    },
    {
        "id": "b602bb0b116a7644",
        "type": "group",
        "z": "ee81bdc633abbb7c",
        "name": "Register Device",
        "style": {
            "label": true
        },
        "nodes": [
            "e23f4ae0f68d854f",
            "9c3c90def5d0b0df",
            "5f51e264d572954c",
            "92b5a3d59faa98da",
            "0a7c6021cb2af914",
            "aab65bfad9e8a476",
            "476646e7fe9a8dad",
            "7b8b9d786a0bea40",
            "9f2cb4747a2f23b3"
        ],
        "x": 14,
        "y": 191.5,
        "w": 1112,
        "h": 149.5
    },
    {
        "id": "3965434fb20845d9",
        "type": "group",
        "z": "ee81bdc633abbb7c",
        "name": "Device Logs",
        "style": {
            "label": true
        },
        "nodes": [
            "da4034565cb6548f",
            "1816f4a39a202381",
            "721c38e0e6168b7e",
            "8de1c3816c0fdfa8"
        ],
        "x": 14,
        "y": 39,
        "w": 612,
        "h": 122
    },
    {
        "id": "65403b852ee3fd80",
        "type": "junction",
        "z": "6b5ddb850b89560b",
        "x": 380,
        "y": 40,
        "wires": [
            [
                "7dedba989a1e13c0"
            ]
        ]
    },
    {
        "id": "4ac5b25054f597d1",
        "type": "junction",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "x": 520,
        "y": 1000,
        "wires": [
            [
                "deb89b962cb09b1f",
                "9ab1c98b857bccdb",
                "b572cca0a6301eb6"
            ]
        ]
    },
    {
        "id": "d8902c387ec08295",
        "type": "junction",
        "z": "ee81bdc633abbb7c",
        "g": "93e67b0b85b043db",
        "x": 520,
        "y": 760,
        "wires": [
            [
                "47aa2548892ad64b"
            ]
        ]
    },
    {
        "id": "ee31fc11feb98c6f",
        "type": "junction",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "x": 1040,
        "y": 1120,
        "wires": [
            [
                "28c2db5d0dc1d0ff"
            ]
        ]
    },
    {
        "id": "28c2db5d0dc1d0ff",
        "type": "junction",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "x": 1180,
        "y": 1120,
        "wires": [
            [
                "9d93ccae9a87a8cb"
            ]
        ]
    },
    {
        "id": "9f2cb4747a2f23b3",
        "type": "junction",
        "z": "ee81bdc633abbb7c",
        "g": "b602bb0b116a7644",
        "x": 420,
        "y": 240,
        "wires": [
            [
                "aab65bfad9e8a476",
                "476646e7fe9a8dad"
            ]
        ]
    },
    {
        "id": "bb1f05320e11b457",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "InfluxDb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://bubli.local:8086/",
        "timeout": 10,
        "rejectUnauthorized": false
    },
    {
        "id": "76494be814e2c42d",
        "type": "mqtt-broker",
        "name": "MQTT Docker",
        "broker": "bubli.local",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d50d0c9f.31e858",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    },
    {
        "id": "0181503f75b7a1e0",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "589dd8c960567a01",
        "type": "ui-base",
        "name": "My UI",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false
    },
    {
        "id": "91a91f4745ad3ad7",
        "type": "ui-theme",
        "name": "Basic Blue Theme",
        "colors": {
            "surface": "#4d58ff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "c35fac764fa650c3",
        "type": "ui-page",
        "name": "Alerts",
        "ui": "589dd8c960567a01",
        "path": "/alerts",
        "icon": "alert-decagram",
        "layout": "grid",
        "theme": "0181503f75b7a1e0",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "b2798c6899bf4cc1",
        "type": "ui-group",
        "name": "Select",
        "page": "c35fac764fa650c3",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "ef54a0bf43ed426c",
        "type": "global-config",
        "name": "global-config",
        "env": [
            {
                "name": "telegram_chat_id",
                "value": "1201591574",
                "type": "num"
            },
            {
                "name": "command_timeout_default",
                "value": "4000",
                "type": "num"
            },
            {
                "name": "organization",
                "value": "bubli",
                "type": "str"
            }
        ]
    },
    {
        "id": "dece1221f92e2b86",
        "type": "ui-page",
        "name": "Devices",
        "ui": "589dd8c960567a01",
        "path": "/devices",
        "icon": "devices",
        "layout": "grid",
        "theme": "0181503f75b7a1e0",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "efa0a5cde6efba18",
        "type": "ui-group",
        "name": "Devices Table",
        "page": "dece1221f92e2b86",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "129cfd06b8f0127b",
        "type": "ui-group",
        "name": "Logs",
        "page": "dece1221f92e2b86",
        "width": "12",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "08ee9ee87f0f2de3",
        "type": "ui-page",
        "name": "Commands",
        "ui": "589dd8c960567a01",
        "path": "/commands",
        "icon": "invoice-text-arrow-right-outline",
        "layout": "grid",
        "theme": "0181503f75b7a1e0",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 5,
        "className": "",
        "visible": false,
        "disabled": false
    },
    {
        "id": "f4cd6c5ea117a71a",
        "type": "ui-group",
        "name": "Commands Table",
        "page": "08ee9ee87f0f2de3",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "765c042561b97c3d",
        "type": "ui-group",
        "name": "Delete device?",
        "page": "dece1221f92e2b86",
        "width": "3",
        "height": "2",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "dialog"
    },
    {
        "id": "129e99574def90a3",
        "type": "ui-theme",
        "name": "Custom Theme",
        "colors": {
            "surface": "#000000",
            "primary": "#ff4000",
            "bgPage": "#f0f0f0",
            "groupBg": "#ffffff",
            "groupOutline": "#d9d9d9"
        },
        "sizes": {
            "pagePadding": "24px",
            "groupGap": "12px",
            "groupBorderRadius": "9px",
            "widgetGap": "6px",
            "density": "default"
        }
    },
    {
        "id": "125065e5fc820fe0",
        "type": "ui-page",
        "name": "Annotations",
        "ui": "589dd8c960567a01",
        "path": "/annotations",
        "icon": "notebook",
        "layout": "grid",
        "theme": "0181503f75b7a1e0",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "5"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "5"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "5842c562b52cf216",
        "type": "ui-page",
        "name": "Home Page",
        "ui": "589dd8c960567a01",
        "path": "/",
        "icon": "home",
        "layout": "grid",
        "theme": "0181503f75b7a1e0",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "76958db0ee85d0af",
        "type": "ui-group",
        "name": "Notes ",
        "page": "125065e5fc820fe0",
        "width": "12",
        "height": "4",
        "order": 9,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "6738f2ac549b9dc9",
        "type": "ui-group",
        "name": "fert 1",
        "page": "125065e5fc820fe0",
        "width": "5",
        "height": "2",
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "0d072f0f7668de64",
        "type": "ui-group",
        "name": "fert 2",
        "page": "125065e5fc820fe0",
        "width": "5",
        "height": "2",
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "c096121eeabcddc2",
        "type": "ui-group",
        "name": "fert 3",
        "page": "125065e5fc820fe0",
        "width": "5",
        "height": "2",
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "b860343b6008fb71",
        "type": "ui-group",
        "name": "fert 4",
        "page": "125065e5fc820fe0",
        "width": "5",
        "height": "2",
        "order": 5,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "5b190b0d450f3aa0",
        "type": "ui-group",
        "name": "fert 5 ",
        "page": "125065e5fc820fe0",
        "width": "5",
        "height": "2",
        "order": 6,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "2833675fd8d489c7",
        "type": "ui-group",
        "name": "fert 6",
        "page": "125065e5fc820fe0",
        "width": "5",
        "height": "2",
        "order": 7,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "0c4bd1e195876f89",
        "type": "ui-group",
        "name": "Water",
        "page": "125065e5fc820fe0",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "3a145ef5ad38230e",
        "type": "ui-group",
        "name": "ph",
        "page": "125065e5fc820fe0",
        "width": "6",
        "height": "1",
        "order": 8,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "51c69c4af9504f77",
        "type": "telegram bot",
        "botname": "Growbox_120x90",
        "usernames": "",
        "chatids": "1201591574",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "addressfamily": "",
        "pollinterval": "500",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbothost": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "93f6cb1d2294f113",
        "type": "change",
        "z": "359c38d245e1747d",
        "name": "clear msg",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "query",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "rc",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c560680a90080457",
        "type": "exec",
        "z": "359c38d245e1747d",
        "command": "",
        "addpay": "query",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "ping once",
        "x": 540,
        "y": 160,
        "wires": [
            [
                "c22ba1ed77985148"
            ],
            [],
            []
        ]
    },
    {
        "id": "2541d0a40c91e277",
        "type": "function",
        "z": "359c38d245e1747d",
        "name": "ping query",
        "func": "msg.query = \"ping -c 1 -w \" + env.get(\"max_response_time\") + \" \"  + msg.ip +\" >/dev/null && echo 'up' ||  echo 'down'\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 160,
        "wires": [
            [
                "c560680a90080457"
            ]
        ]
    },
    {
        "id": "c22ba1ed77985148",
        "type": "function",
        "z": "359c38d245e1747d",
        "name": "count failed pings",
        "func": "//slice to delete \"new line\" char\nmsg.payload = msg.payload.slice(0, -1)\n\n//flow variable has not been initialized yet\nif (typeof flow.get(msg.ip) == 'undefined' || flow.get(msg.ip) == null) {\n    flow.set(msg.ip, 0);\n}\n\nif (msg.payload == \"down\") {\n    //increment failed ping attempts count\n    flow.set(msg.ip, flow.get(msg.ip) + 1)\n}\nif (msg.payload == \"up\"){\n    //setting to undefined will delete the property\n    flow.set(msg.ip, undefined);\n}\n\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 160,
        "wires": [
            [
                "c8c75b53cce4c5d7"
            ]
        ],
        "outputLabels": [
            "down"
        ]
    },
    {
        "id": "c8c75b53cce4c5d7",
        "type": "function",
        "z": "359c38d245e1747d",
        "name": "threshold trigger",
        "func": "let failedAttempts = flow.get(msg.ip)\nlet threshold = env.get(\"max_failed_ping\")\n\nif (typeof failedAttempts == 'undefined') {\n    msg.status = \"up\"\n}else if (failedAttempts >= threshold) {\n    msg.status = \"down\";\n} else {\n    //dropped some package, but not above threshold yet\n    msg.status = \"unstable\"\n}\n\n\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 160,
        "wires": [
            [
                "89e02ed2dc623c25"
            ]
        ],
        "outputLabels": [
            "down"
        ]
    },
    {
        "id": "c83c7fd79d5e1f48",
        "type": "function",
        "z": "359c38d245e1747d",
        "name": "see all flow variables",
        "func": "msg.payload = flow.keys()\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 260,
        "wires": [
            [
                "aacb7aea14df8889",
                "73f6f2f3358736a3"
            ]
        ]
    },
    {
        "id": "aacb7aea14df8889",
        "type": "debug",
        "z": "359c38d245e1747d",
        "name": "reset flow variable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"ping flow variables starting with 192.xxx.x.xx reset\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 260,
        "wires": []
    },
    {
        "id": "0e50394171291fdd",
        "type": "switch",
        "z": "359c38d245e1747d",
        "name": "reset command?",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 160,
        "wires": [
            [
                "2541d0a40c91e277"
            ],
            [
                "42f950f0a80dbcdf"
            ]
        ]
    },
    {
        "id": "42f950f0a80dbcdf",
        "type": "change",
        "z": "359c38d245e1747d",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "192",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 260,
        "wires": [
            [
                "c83c7fd79d5e1f48"
            ]
        ]
    },
    {
        "id": "89e02ed2dc623c25",
        "type": "rbe",
        "z": "359c38d245e1747d",
        "name": "status changed",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "status",
        "topi": "ip",
        "x": 1100,
        "y": 160,
        "wires": [
            [
                "93f6cb1d2294f113"
            ]
        ]
    },
    {
        "id": "072f471b3bfa4136",
        "type": "debug",
        "z": "359c38d245e1747d",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"changed\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 240,
        "wires": []
    },
    {
        "id": "73f6f2f3358736a3",
        "type": "debug",
        "z": "359c38d245e1747d",
        "name": "show variables",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 300,
        "wires": []
    },
    {
        "id": "61b06eb94a4aef57",
        "type": "http response",
        "z": "36160a387bc59014",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "text/csv"
        },
        "x": 2900,
        "y": 180,
        "wires": []
    },
    {
        "id": "cce6def5480b0ae6",
        "type": "function",
        "z": "36160a387bc59014",
        "name": "build json response",
        "func": "let fieldName = msg.field_name_prefix + \" (\" +(msg.offset_in_ms/ 86_400_000)+ \" days)\"\nfor (let i = 0; i < msg.payload.length; i++) {\n    //this is display time (shift forward)\n    let shiftedTime = new Date(msg.payload[i].time).valueOf() + msg.offset_in_ms\n    msg.payload[i] ={\n        time: shiftedTime, \n        [fieldName] : msg.payload[i].mean\n    }\n    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 180,
        "wires": [
            [
                "1e53e89cd6a96835"
            ]
        ]
    },
    {
        "id": "837e51bf886091b0",
        "type": "function",
        "z": "36160a387bc59014",
        "name": "build query",
        "func": "msg.offset_in_ms = msg.payload.days_offset * 86_400_000\n\nlet newFrom = new Date(msg.time_from - msg.offset_in_ms).toISOString()\nlet newTo = new Date(msg.time_to - msg.offset_in_ms).toISOString()\n\nmsg.query =\n    \"SELECT \" + msg.payload.SELECT +\n    \" FROM \" + msg.payload.FROM +\n    \" WHERE \" + msg.payload.WHERE.join(\" AND \") +\n    \" AND time > '\" + newFrom + \"' AND time < '\" + newTo + \"'\" +\n    \" GROUP BY \" + msg.payload.GROUP_BY\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e8f5bb36794b8c47",
        "type": "http response",
        "z": "36160a387bc59014",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1040,
        "y": 240,
        "wires": []
    },
    {
        "id": "56b7002e2f940b7f",
        "type": "function",
        "z": "36160a387bc59014",
        "name": "convert days_offset to json",
        "func": "if (msg.payload.days_offset.includes(\"{\")) {\n    //is array\n    msg.payload.days_offset = msg.payload.days_offset.replace(\"{\", \"[\").replace(\"}\", \"]\")\n\n} else {\n    //is object\n    msg.payload.days_offset = \"[\"+ msg.payload.days_offset +\"]\"\n}\n\nmsg.payload.days_offset = JSON.parse(msg.payload.days_offset);\n\nif (msg.payload.days_offset.includes(0)) return [null, msg]\n\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 160,
        "wires": [
            [
                "7094932930fed22e"
            ],
            [
                "da49298ee8cab80a"
            ]
        ]
    },
    {
        "id": "7094932930fed22e",
        "type": "split",
        "z": "36160a387bc59014",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload.days_offset",
        "x": 850,
        "y": 180,
        "wires": [
            [
                "837e51bf886091b0"
            ]
        ]
    },
    {
        "id": "1e53e89cd6a96835",
        "type": "join",
        "z": "36160a387bc59014",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "from_time",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 2590,
        "y": 180,
        "wires": [
            [
                "8789f7d7f171b6b7"
            ]
        ]
    },
    {
        "id": "8789f7d7f171b6b7",
        "type": "function",
        "z": "36160a387bc59014",
        "name": "flatten Json",
        "func": "// Reformat the data\nmsg.payload = msg.payload.flat()\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2730,
        "y": 180,
        "wires": [
            [
                "61b06eb94a4aef57",
                "e4e2099d3aeb37e5"
            ]
        ]
    },
    {
        "id": "da49298ee8cab80a",
        "type": "change",
        "z": "36160a387bc59014",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 240,
        "wires": [
            [
                "e8f5bb36794b8c47"
            ]
        ]
    },
    {
        "id": "d401e1a83a2fbefc",
        "type": "function",
        "z": "36160a387bc59014",
        "name": "checks zoomThreshold",
        "func": "let zoomThreshold = msg.payload.days_zoom_threshold * 86_400_000 // we dont want to show old data when zoomed out\n\n\nmsg.field_name_prefix = msg.payload.field_name_prefix\n\n//convert from string to number\nmsg.time_to = Number(msg.payload.time_to)\nmsg.time_from = Number(msg.payload.time_from)\n\nif (msg.time_to - msg.time_from > zoomThreshold) return [null , msg]\nelse return [msg , null]\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "56b7002e2f940b7f"
            ],
            [
                "da49298ee8cab80a"
            ]
        ]
    },
    {
        "id": "d04e71420d0262e1",
        "type": "switch",
        "z": "36160a387bc59014",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "parts.count",
                "vt": "msg"
            },
            {
                "t": "lt",
                "v": "parts.count",
                "vt": "msg"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 1810,
        "y": 180,
        "wires": [
            [],
            [
                "482739a8b83bd382",
                "a2e27a4363cef545"
            ],
            [
                "fc7142d9d52ad9f4"
            ]
        ]
    },
    {
        "id": "2e9846fceb6b17a5",
        "type": "change",
        "z": "36160a387bc59014",
        "name": "free up msg.payload for counter",
        "rules": [
            {
                "t": "set",
                "p": "queryResult",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 180,
        "wires": [
            [
                "430184a5c2eba3df"
            ]
        ]
    },
    {
        "id": "482739a8b83bd382",
        "type": "change",
        "z": "36160a387bc59014",
        "name": "mark as last message",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2020,
        "y": 140,
        "wires": [
            [
                "fc7142d9d52ad9f4"
            ]
        ]
    },
    {
        "id": "a2e27a4363cef545",
        "type": "change",
        "z": "36160a387bc59014",
        "name": "reset counter",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1670,
        "y": 100,
        "wires": [
            [
                "430184a5c2eba3df"
            ]
        ]
    },
    {
        "id": "fc7142d9d52ad9f4",
        "type": "change",
        "z": "36160a387bc59014",
        "name": "get payload back",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queryResult",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "queryResult",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2230,
        "y": 180,
        "wires": [
            [
                "cce6def5480b0ae6"
            ]
        ]
    },
    {
        "id": "49eb15f1c3cf419a",
        "type": "debug",
        "z": "36160a387bc59014",
        "name": "\"Hide historical Data\"",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Hide historical Data\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 280,
        "wires": []
    },
    {
        "id": "e4e2099d3aeb37e5",
        "type": "debug",
        "z": "36160a387bc59014",
        "name": "debug 33",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"returning historical data\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 2900,
        "y": 220,
        "wires": []
    },
    {
        "id": "4f3e34b2f14364e1",
        "type": "http in",
        "z": "36160a387bc59014",
        "name": "",
        "url": "/offset",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "9aa1ac76c9d2dd69",
        "type": "debug",
        "z": "36160a387bc59014",
        "name": "\"Show historical Data\"",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Show historical Data\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 140,
        "wires": []
    },
    {
        "id": "430184a5c2eba3df",
        "type": "counter",
        "z": "36160a387bc59014",
        "inc": 1,
        "name": "",
        "x": 1680,
        "y": 180,
        "wires": [
            [
                "d04e71420d0262e1"
            ]
        ]
    },
    {
        "id": "791c45a53ad1e96e",
        "type": "function",
        "z": "0bf4167d8ce8f656",
        "name": "",
        "func": "msg.topic = \"fert.\" + msg.target + \".total\"\nmsg.payload = global.get(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 200,
        "wires": [
            [
                "a27dd90e355e6c82"
            ]
        ]
    },
    {
        "id": "4291f2ca80e9b95c",
        "type": "function",
        "z": "0bf4167d8ce8f656",
        "name": "",
        "func": "msg.topic = \"fert.\" + msg.target + \".concentration\"\nmsg.payload = global.get(msg.topic)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 120,
        "wires": [
            [
                "7c0913d2517dc02d"
            ]
        ]
    },
    {
        "id": "d95133b784dcb418",
        "type": "function",
        "z": "0bf4167d8ce8f656",
        "name": "",
        "func": "let formattedName = msg.target.replace(\"_\", \" \").toUpperCase()\nmsg.payload=  \"<b>\" + formattedName + \"</b>\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 80,
        "wires": [
            [
                "dd1d3c10d6d59dda"
            ]
        ]
    },
    {
        "id": "bc937e1c8e734b5f",
        "type": "link out",
        "z": "0bf4167d8ce8f656",
        "name": "",
        "mode": "return",
        "links": [],
        "x": 195,
        "y": 200,
        "wires": []
    },
    {
        "id": "dd1d3c10d6d59dda",
        "type": "ui-text",
        "z": "0bf4167d8ce8f656",
        "group": "${group}",
        "order": 1,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "style": false,
        "font": "Century Gothic,CenturyGothic,AppleGothic,sans-serif",
        "fontSize": 16,
        "color": "#9b2727",
        "wrapText": false,
        "className": "",
        "x": 590,
        "y": 60,
        "wires": []
    },
    {
        "id": "7c0913d2517dc02d",
        "type": "ui-number-input",
        "z": "0bf4167d8ce8f656",
        "group": "${group}",
        "name": "concentration",
        "label": "",
        "order": 1,
        "width": "2",
        "height": "1",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "1000",
        "step": "0.5",
        "tooltip": "",
        "passthru": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "stacked",
        "x": 620,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "665a744400255099",
        "type": "ui-text",
        "z": "0bf4167d8ce8f656",
        "group": "${group}",
        "order": 1,
        "width": "1",
        "height": "1",
        "name": "ml",
        "label": "ml/L",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "wrapText": false,
        "className": "",
        "x": 590,
        "y": 140,
        "wires": []
    },
    {
        "id": "a27dd90e355e6c82",
        "type": "ui-number-input",
        "z": "0bf4167d8ce8f656",
        "group": "${group}",
        "name": "total fertilizer",
        "label": "",
        "order": 1,
        "width": "4",
        "height": "1",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "100000",
        "step": "1",
        "tooltip": "",
        "passthru": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "stacked",
        "x": 610,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "dc70674a0470f764",
        "type": "ui-text",
        "z": "0bf4167d8ce8f656",
        "group": "${group}",
        "order": 1,
        "width": 1,
        "height": "",
        "name": "",
        "label": "ml",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 590,
        "y": 220,
        "wires": []
    },
    {
        "id": "47e5b470d4435dc8",
        "type": "comment",
        "z": "0bf4167d8ce8f656",
        "name": "how to order widgets",
        "info": "this are placed in the order in which they are pasted, there is no way to move them",
        "x": 640,
        "y": 20,
        "wires": []
    },
    {
        "id": "2839fbec2403752a",
        "type": "function",
        "z": "2420f75c4c01f1de",
        "name": "threshold detector",
        "func": "\n// Retrieve previous state\nlet lastState = context.get(\"lastState\") ?? \"inside\"; // Possible values: \"inside\", \"below\", \"above\"\n\nlet value = msg.result.value;\nmsg.result.status = null;\n\nif (value < env.get(\"min\")) {\n    if (lastState === \"inside\" || lastState === \"above\") {\n        // Value moved from inside or from above to below minValue\n        msg.result.status = \"below_minimum\";\n    }\n    lastState = \"below\";\n} else if (value > env.get(\"max\")) {\n    if (lastState === \"inside\" || lastState === \"below\") {\n        // Value moved from inside or from below to above maxValue\n        msg.result.status = \"above_maximum\";\n    }\n    lastState = \"above\";\n} else {\n    // Value is inside the range\n    if (lastState !== \"inside\") {\n        lastState = \"inside\";\n    }\n}\n\n// Store updated state\ncontext.set(\"lastState\", lastState);\n\n// Return the message only if a transition was detected\nreturn msg.result.status ? [msg] : null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            [
                "dae217947b2a9628"
            ]
        ]
    },
    {
        "id": "a5e2a8226152358e",
        "type": "function",
        "z": "2420f75c4c01f1de",
        "name": "get value from path",
        "func": "msg = {\n    result: {\n        value: RED.util.getMessageProperty(msg, env.get(\"value_path\")),\n        unit: RED.util.getMessageProperty(msg, env.get(\"unit_path\"))\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            [
                "2839fbec2403752a"
            ]
        ]
    },
    {
        "id": "dae217947b2a9628",
        "type": "switch",
        "z": "2420f75c4c01f1de",
        "name": "",
        "property": "result.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "above_maximum",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "below_minimum",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 80,
        "wires": [
            [
                "b65c0c69f997f246"
            ],
            [
                "1b8bebbfb7c1ef93"
            ]
        ]
    },
    {
        "id": "a80f580ab215d124",
        "type": "template",
        "z": "2420f75c4c01f1de",
        "name": "",
        "field": "result",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "[{{result.title}}]\n{{result.subtitle}}\nvalue: {{result.value}}{{result.unit}}\n---------------------\n{{result.time}}",
        "output": "str",
        "x": 1140,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b65c0c69f997f246",
        "type": "change",
        "z": "2420f75c4c01f1de",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "result.subtitle",
                "pt": "msg",
                "to": "subtitle_above",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 60,
        "wires": [
            [
                "898f114b5a2a5512"
            ]
        ]
    },
    {
        "id": "1b8bebbfb7c1ef93",
        "type": "change",
        "z": "2420f75c4c01f1de",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "result.subtitle",
                "pt": "msg",
                "to": "subtitle_below",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 100,
        "wires": [
            [
                "898f114b5a2a5512"
            ]
        ]
    },
    {
        "id": "898f114b5a2a5512",
        "type": "change",
        "z": "2420f75c4c01f1de",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "result.title",
                "pt": "msg",
                "to": "title",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "result.time",
                "pt": "msg",
                "to": "object",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 80,
        "wires": [
            [
                "a80f580ab215d124"
            ]
        ]
    },
    {
        "id": "5c6b417bcc6b87a7",
        "type": "function",
        "z": "780f7e06d7eb6c70",
        "name": "filter",
        "func": "if (msg.payload[1].device_name == env.get(\"device_name\")\n    && msg.payload[1].sensor_name == env.get(\"sensor_name\")\n    && msg.payload[1].description == env.get(\"description\")) {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "69429da752381f06",
        "type": "function",
        "z": "780f7e06d7eb6c70",
        "name": "input object example",
        "func": "return {\n    \"topic\": \"/reading\",\n    \"payload\": [\n        {\n            \"value\": 4\n        },\n        {\n            \"unit\": \"°C\",\n            \"device_name\": \"TDR_THERMOHYGROMETER_MODULE\",\n            \"sensor_name\": \"TempAndRh_Sensor\",\n            \"description\": \"temp\"\n        }\n    ],\n    \"_msgid\": \"d23e84f7153865fd\",\n    \"measurement\": \"reading\",\n    \"_event\": \"node:8259a9a149738b3d\"\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "6162d53105800a08",
        "type": "function",
        "z": "6b5ddb850b89560b",
        "name": "Send command",
        "func": "msg.topic = \"/command/\" + env.get(\"device_name\");\n\n//get everything before the -\nlet calling_node = env.get(\"NR_NODE_ID\").split('-')[0];\n\nmsg.payload = {\n    id: msg._msgid,\n    calling_node: calling_node,\n    device_name: env.get(\"device_name\"),\n    request_title: env.get(\"request_title\"),\n    request_body: env.get(\"request_body\")\n    //response_title: \"...success timeout error etc...\",\n    //response_body: \"...json...\"\n}\n\n\n\n\n// Set up timeout\nflow.set(\"timeout_\" + calling_node, setTimeout(() => {\n\n    // this goes through after the timeout\n    // unless it is resetted by a message response\n\n    msg.payload.response_title = \"timeout\"\n    msg.payload.response_body = \"Command did not recieve an answer within \" + env.get(\"time_out\") + \" milliseconds\"\n    \n    node.send([null, msg]);\n\n}, env.get(\"time_out\")));\n\n\n\n\n//goes through immediately, regardless of the timeout.\nnode.send([msg, null]);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 200,
        "wires": [
            [
                "68477b6c269a7b24",
                "65403b852ee3fd80"
            ],
            [
                "f243b9eeed82ca2d"
            ]
        ]
    },
    {
        "id": "be4468d2d7880d20",
        "type": "switch",
        "z": "6b5ddb850b89560b",
        "name": "is command response succesfull",
        "property": "payload.response_title",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 740,
        "y": 280,
        "wires": [
            [
                "19adc42a84d31261"
            ],
            [
                "568f4ba803592248"
            ]
        ]
    },
    {
        "id": "68477b6c269a7b24",
        "type": "mqtt out",
        "z": "6b5ddb850b89560b",
        "name": "send message",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "76494be814e2c42d",
        "x": 480,
        "y": 140,
        "wires": []
    },
    {
        "id": "1d7fe4ac3f980b25",
        "type": "function",
        "z": "6b5ddb850b89560b",
        "name": "if id is correct",
        "func": "\n//get everything before the -\nlet calling_node = env.get(\"NR_NODE_ID\").split('-')[0];\n\nif (msg.payload.calling_node == calling_node) {\n    //clear timeout\n    clearTimeout(flow.get(\"timeout_\" + calling_node))\n    //clears the variable\n    flow.set(\"timeout_\" + calling_node)\n\n    return msg\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 280,
        "wires": [
            [
                "be4468d2d7880d20"
            ]
        ]
    },
    {
        "id": "7dedba989a1e13c0",
        "type": "function",
        "z": "6b5ddb850b89560b",
        "name": "waiting",
        "func": "msg.payload = {fill:\"yellow\",shape:\"ring\",text:\"waiting response\"}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7707ce95d0d1ac52",
        "type": "function",
        "z": "6b5ddb850b89560b",
        "name": "clear",
        "func": "msg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "ec2babcf300bc133",
        "type": "function",
        "z": "6b5ddb850b89560b",
        "name": "timed out",
        "func": "////node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\nmsg.payload = {fill:\"red\",shape:\"dot\",text:\"timed out\"}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f7758dc6cb654779",
        "type": "influxdb out",
        "z": "6b5ddb850b89560b",
        "influxdb": "bb1f05320e11b457",
        "name": "",
        "measurement": "commands",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "${organization}",
        "bucket": "commands",
        "x": 1450,
        "y": 280,
        "wires": []
    },
    {
        "id": "3cecfbbdc05e366c",
        "type": "function",
        "z": "6b5ddb850b89560b",
        "name": "format for influx db",
        "func": "msg.payload = [\n    {\n        \"request_title\": msg.payload.request_title,\n        \"request_body\": msg.payload.request_body,\n        \"response_title\": msg.payload.response_title,\n        \"response_body\": msg.payload.response_body\n    },\n    {\n        \"command_id\": msg.payload.id,\n        \"calling_node\": msg.payload.calling_node,\n        \"device_name\": msg.payload.device_name\n    }\n]\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 280,
        "wires": [
            [
                "f7758dc6cb654779"
            ]
        ]
    },
    {
        "id": "19adc42a84d31261",
        "type": "link out",
        "z": "6b5ddb850b89560b",
        "name": "response success out",
        "mode": "link",
        "links": [
            "cb586dc3ddf24454",
            "1a876869afe727f2",
            "20d7ebb62d98410e"
        ],
        "x": 935,
        "y": 260,
        "wires": []
    },
    {
        "id": "cb586dc3ddf24454",
        "type": "link in",
        "z": "6b5ddb850b89560b",
        "name": "response success in",
        "links": [
            "19adc42a84d31261"
        ],
        "x": 1085,
        "y": 280,
        "wires": [
            [
                "3cecfbbdc05e366c"
            ]
        ]
    },
    {
        "id": "568f4ba803592248",
        "type": "link out",
        "z": "6b5ddb850b89560b",
        "name": "response error out",
        "mode": "link",
        "links": [
            "a9b5a40f6820fae4",
            "eb282d403575c7bd",
            "0b075743d6b61e47",
            "d6659ae6eafbd96d"
        ],
        "x": 935,
        "y": 300,
        "wires": []
    },
    {
        "id": "f243b9eeed82ca2d",
        "type": "link out",
        "z": "6b5ddb850b89560b",
        "name": "response timeout out",
        "mode": "link",
        "links": [
            "1f45bb5ea35286a6",
            "7e7718d122ae4030",
            "f10419f25dd3120d",
            "91b5471b8f6bee78"
        ],
        "x": 385,
        "y": 220,
        "wires": []
    },
    {
        "id": "a9b5a40f6820fae4",
        "type": "link in",
        "z": "6b5ddb850b89560b",
        "name": "response error in",
        "links": [
            "568f4ba803592248"
        ],
        "x": 1085,
        "y": 320,
        "wires": [
            [
                "3cecfbbdc05e366c"
            ]
        ]
    },
    {
        "id": "1f45bb5ea35286a6",
        "type": "link in",
        "z": "6b5ddb850b89560b",
        "name": "response timeout in",
        "links": [
            "f243b9eeed82ca2d"
        ],
        "x": 1085,
        "y": 240,
        "wires": [
            [
                "3cecfbbdc05e366c"
            ]
        ]
    },
    {
        "id": "1a876869afe727f2",
        "type": "link in",
        "z": "6b5ddb850b89560b",
        "name": "response success in",
        "links": [
            "19adc42a84d31261"
        ],
        "x": 1085,
        "y": 120,
        "wires": [
            [
                "7707ce95d0d1ac52"
            ]
        ]
    },
    {
        "id": "7e7718d122ae4030",
        "type": "link in",
        "z": "6b5ddb850b89560b",
        "name": "response timeout in",
        "links": [
            "f243b9eeed82ca2d"
        ],
        "x": 1085,
        "y": 80,
        "wires": [
            [
                "ec2babcf300bc133"
            ]
        ]
    },
    {
        "id": "0f646184c2ec863a",
        "type": "function",
        "z": "6b5ddb850b89560b",
        "name": "error",
        "func": "msg.payload = { fill: \"red\", shape: \"ring\", text: \" response error\" }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "eb282d403575c7bd",
        "type": "link in",
        "z": "6b5ddb850b89560b",
        "name": "response error in",
        "links": [
            "568f4ba803592248"
        ],
        "x": 1085,
        "y": 160,
        "wires": [
            [
                "0f646184c2ec863a"
            ]
        ]
    },
    {
        "id": "20d7ebb62d98410e",
        "type": "link in",
        "z": "6b5ddb850b89560b",
        "name": "response success in",
        "links": [
            "19adc42a84d31261"
        ],
        "x": 1075,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "0b075743d6b61e47",
        "type": "link in",
        "z": "6b5ddb850b89560b",
        "name": "response error in",
        "links": [
            "568f4ba803592248"
        ],
        "x": 1075,
        "y": 480,
        "wires": [
            [
                "1f35eba5b99dd433"
            ]
        ]
    },
    {
        "id": "f10419f25dd3120d",
        "type": "link in",
        "z": "6b5ddb850b89560b",
        "name": "response timeout in",
        "links": [
            "f243b9eeed82ca2d"
        ],
        "x": 1075,
        "y": 400,
        "wires": [
            [
                "26a6f1ef9f7fc9ad"
            ]
        ]
    },
    {
        "id": "91b5471b8f6bee78",
        "type": "link in",
        "z": "6b5ddb850b89560b",
        "name": "response timeout in",
        "links": [
            "f243b9eeed82ca2d"
        ],
        "x": 1075,
        "y": 620,
        "wires": [
            [
                "44e3b723d5125cb3"
            ]
        ]
    },
    {
        "id": "d6659ae6eafbd96d",
        "type": "link in",
        "z": "6b5ddb850b89560b",
        "name": "response error in",
        "links": [
            "568f4ba803592248"
        ],
        "x": 1075,
        "y": 660,
        "wires": [
            [
                "44e3b723d5125cb3"
            ]
        ]
    },
    {
        "id": "44e3b723d5125cb3",
        "type": "switch",
        "z": "6b5ddb850b89560b",
        "name": "if send notification",
        "property": "send_notification",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1210,
        "y": 640,
        "wires": [
            [
                "d1faabd30186c86e"
            ]
        ]
    },
    {
        "id": "a84f7683e3cfc4a3",
        "type": "function",
        "z": "6b5ddb850b89560b",
        "name": "build message",
        "func": "msg.payload = {\n    \"content\": msg.payload,\n    \"type\": \"message\",\n    \"chatId\": env.get(\"telegram_chat_id\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 640,
        "wires": [
            [
                "100216f92f5be55c"
            ]
        ]
    },
    {
        "id": "d1faabd30186c86e",
        "type": "template",
        "z": "6b5ddb850b89560b",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "[Command Error]\nError while sending command to {{payload.device_name}}\n\n{{payload.response_body}}",
        "output": "str",
        "x": 1380,
        "y": 640,
        "wires": [
            [
                "a84f7683e3cfc4a3"
            ]
        ]
    },
    {
        "id": "abd12a361189fad1",
        "type": "mqtt in",
        "z": "6b5ddb850b89560b",
        "name": "response",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "76494be814e2c42d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 340,
        "y": 280,
        "wires": [
            [
                "1d7fe4ac3f980b25"
            ]
        ]
    },
    {
        "id": "248aa941843972b9",
        "type": "function",
        "z": "6b5ddb850b89560b",
        "name": "subscribe",
        "func": "\nmsg.topic = \"/response/\" + env.get(\"device_name\");\nmsg.action = \"subscribe\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 280,
        "wires": [
            [
                "abd12a361189fad1"
            ]
        ]
    },
    {
        "id": "100216f92f5be55c",
        "type": "telegram sender",
        "z": "6b5ddb850b89560b",
        "name": "",
        "bot": "51c69c4af9504f77",
        "haserroroutput": true,
        "outputs": 2,
        "x": 1720,
        "y": 640,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "1f35eba5b99dd433",
        "type": "function",
        "z": "6b5ddb850b89560b",
        "name": "log error message",
        "func": "node.warn(\"Command returned with error: \" + msg.payload.response_body)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "26a6f1ef9f7fc9ad",
        "type": "function",
        "z": "6b5ddb850b89560b",
        "name": "log error message",
        "func": "node.warn(\"Command has timed out\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "e0b8603bc2e349ac",
        "type": "subflow:36160a387bc59014",
        "z": "c1216b540b10bca8",
        "name": "",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "a30b743c0c986a7c",
        "type": "comment",
        "z": "c1216b540b10bca8",
        "name": "these flows are always running",
        "info": "",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "02b70c1a1076165c",
        "type": "inject",
        "z": "c1216b540b10bca8",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "3fba73192d07578b"
            ]
        ]
    },
    {
        "id": "9dde052533d39cc2",
        "type": "debug",
        "z": "c1216b540b10bca8",
        "name": "response success",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 620,
        "wires": []
    },
    {
        "id": "6e3b4f609629f324",
        "type": "subflow:6b5ddb850b89560b",
        "z": "c1216b540b10bca8",
        "name": "AC_DIMMER_MODULE off",
        "env": [
            {
                "name": "device_name",
                "value": "AC_DIMMER_MODULE",
                "type": "str"
            },
            {
                "name": "request_title",
                "value": "turn_off",
                "type": "str"
            },
            {
                "name": "request_body",
                "value": "everything",
                "type": "str"
            },
            {
                "name": "send_notification",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 300,
        "y": 780,
        "wires": [
            [],
            [
                "bc5b7b34a24a961c"
            ],
            []
        ]
    },
    {
        "id": "bc5b7b34a24a961c",
        "type": "debug",
        "z": "c1216b540b10bca8",
        "name": "response success",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 780,
        "wires": []
    },
    {
        "id": "3e11bccb46ca706e",
        "type": "inject",
        "z": "c1216b540b10bca8",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 780,
        "wires": [
            [
                "6e3b4f609629f324"
            ]
        ]
    },
    {
        "id": "3fba73192d07578b",
        "type": "subflow:6b5ddb850b89560b",
        "z": "c1216b540b10bca8",
        "name": "AC_DIMMER_MODULE on",
        "env": [
            {
                "name": "device_name",
                "value": "AC_DIMMER_MODULE",
                "type": "str"
            },
            {
                "name": "request_title",
                "value": "turn_on",
                "type": "str"
            },
            {
                "name": "request_body",
                "value": "everything",
                "type": "str"
            },
            {
                "name": "send_notification",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 300,
        "y": 620,
        "wires": [
            [],
            [
                "9dde052533d39cc2"
            ],
            []
        ]
    },
    {
        "id": "f838dfe0e453767b",
        "type": "subflow:6b5ddb850b89560b",
        "z": "c1216b540b10bca8",
        "name": "TDR_Sensor",
        "env": [
            {
                "name": "device_name",
                "value": "TDR_THERMOHYGROMETER_MODULE",
                "type": "str"
            },
            {
                "name": "request_title",
                "value": "request_sensor_reading",
                "type": "str"
            },
            {
                "name": "request_body",
                "value": "TDR_Sensor",
                "type": "str"
            },
            {
                "name": "send_notification",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 370,
        "y": 360,
        "wires": [
            [],
            [
                "ce2e61ca926fa758"
            ],
            []
        ]
    },
    {
        "id": "33df6aec1b838fc9",
        "type": "subflow:6b5ddb850b89560b",
        "z": "c1216b540b10bca8",
        "name": "TempAndRh_Sensor",
        "env": [
            {
                "name": "device_name",
                "value": "TDR_THERMOHYGROMETER_MODULE",
                "type": "str"
            },
            {
                "name": "request_title",
                "value": "request_sensor_reading",
                "type": "str"
            },
            {
                "name": "request_body",
                "value": "TempAndRh_Sensor",
                "type": "str"
            },
            {
                "name": "send_notification",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 360,
        "y": 420,
        "wires": [
            [],
            [
                "ce2e61ca926fa758"
            ],
            []
        ]
    },
    {
        "id": "065db4f918654301",
        "type": "inject",
        "z": "c1216b540b10bca8",
        "name": "auto inject",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "33df6aec1b838fc9"
            ]
        ]
    },
    {
        "id": "3b43b3cca9abea55",
        "type": "link out",
        "z": "c1216b540b10bca8",
        "name": "on New reading recieved",
        "mode": "link",
        "links": [
            "38b546b07dad6ada"
        ],
        "x": 1035,
        "y": 420,
        "wires": []
    },
    {
        "id": "5283b8d25626b512",
        "type": "function",
        "z": "c1216b540b10bca8",
        "name": "format for influx db",
        "func": "let device_name = msg.payload.device_name\nlet sensor_name = msg.payload.response_body.sensor_name\n\nlet value = msg.payload.response_body.readings.value\nlet unit = msg.payload.response_body.readings.unit\nlet description = msg.payload.response_body.readings.type\n\nmsg.payload=  [\n        {\n            \"value\": parseFloat(value)\n        },\n        {\n            \"device_name\": device_name,\n            \"sensor_name\": sensor_name,\n            \"description\": description,\n            \"unit\": unit\n        }\n    ]\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 380,
        "wires": [
            [
                "3b43b3cca9abea55",
                "064079642dcd1e7d"
            ]
        ]
    },
    {
        "id": "bec0195271c87917",
        "type": "debug",
        "z": "c1216b540b10bca8",
        "name": "debug 59",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 340,
        "wires": []
    },
    {
        "id": "93fdf6255f7184eb",
        "type": "split",
        "z": "c1216b540b10bca8",
        "name": "split each reading",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload.response_body.readings",
        "x": 710,
        "y": 380,
        "wires": [
            [
                "5283b8d25626b512",
                "bec0195271c87917"
            ]
        ]
    },
    {
        "id": "064079642dcd1e7d",
        "type": "influxdb out",
        "z": "c1216b540b10bca8",
        "influxdb": "bb1f05320e11b457",
        "name": "",
        "measurement": "raw",
        "precision": "ms",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "${organization}",
        "bucket": "readings",
        "x": 1130,
        "y": 380,
        "wires": []
    },
    {
        "id": "ce2e61ca926fa758",
        "type": "json",
        "z": "c1216b540b10bca8",
        "name": "",
        "property": "payload.response_body",
        "action": "obj",
        "pretty": false,
        "x": 550,
        "y": 380,
        "wires": [
            [
                "93fdf6255f7184eb"
            ]
        ]
    },
    {
        "id": "aab9d2202f7a7983",
        "type": "switch",
        "z": "c1216b540b10bca8",
        "name": "if temp",
        "property": "payload.response_body.readings.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "temp",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 870,
        "y": 660,
        "wires": [
            [
                "faccacdd7dccd8a0"
            ]
        ]
    },
    {
        "id": "faccacdd7dccd8a0",
        "type": "rbe",
        "z": "c1216b540b10bca8",
        "name": "",
        "func": "deadband",
        "gap": "1.5",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload.response_body.readings.value",
        "topi": "topic",
        "x": 1050,
        "y": 660,
        "wires": [
            [
                "ab78e0d537cf4d09"
            ]
        ]
    },
    {
        "id": "ab78e0d537cf4d09",
        "type": "function",
        "z": "c1216b540b10bca8",
        "name": "set threshold",
        "func": "let threshold = 22;\nlet value = msg.payload.response_body.readings.value;\n\nif (value >= threshold){\n    msg.payload = \"over\"\n}else {\n    msg.payload = \"under\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 660,
        "wires": [
            [
                "2ff6994e6687bfe8",
                "7431ba50973780f7",
                "6c1fec43f51156a4"
            ]
        ]
    },
    {
        "id": "6c1fec43f51156a4",
        "type": "switch",
        "z": "c1216b540b10bca8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "over",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "under",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1470,
        "y": 660,
        "wires": [
            [
                "53d2cd9eda7fb270"
            ],
            [
                "1d2a73369b16f4b1"
            ]
        ]
    },
    {
        "id": "2ff6994e6687bfe8",
        "type": "debug",
        "z": "c1216b540b10bca8",
        "name": "debug 64",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 700,
        "wires": []
    },
    {
        "id": "53d2cd9eda7fb270",
        "type": "subflow:6b5ddb850b89560b",
        "z": "c1216b540b10bca8",
        "name": "turn_off",
        "env": [
            {
                "name": "device_name",
                "value": "AC_DIMMER_MODULE",
                "type": "str"
            },
            {
                "name": "request_title",
                "value": "turn_off",
                "type": "str"
            },
            {
                "name": "request_body",
                "value": "everything",
                "type": "str"
            },
            {
                "name": "send_notification",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1660,
        "y": 600,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "1d2a73369b16f4b1",
        "type": "subflow:6b5ddb850b89560b",
        "z": "c1216b540b10bca8",
        "name": "turn_on",
        "env": [
            {
                "name": "device_name",
                "value": "AC_DIMMER_MODULE",
                "type": "str"
            },
            {
                "name": "request_title",
                "value": "turn_on",
                "type": "str"
            },
            {
                "name": "request_body",
                "value": "everything",
                "type": "str"
            },
            {
                "name": "send_notification",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1660,
        "y": 700,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "7431ba50973780f7",
        "type": "rbe",
        "z": "c1216b540b10bca8",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1350,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "f37a4d3934bf6162",
        "type": "inject",
        "z": "c1216b540b10bca8",
        "name": "auto inject",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 150,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "71c904177b6b7b7f",
        "type": "subflow:6b5ddb850b89560b",
        "z": "c1216b540b10bca8",
        "name": "TEST_DEVICE",
        "env": [
            {
                "name": "device_name",
                "value": "TEST_DEVICE_1",
                "type": "str"
            },
            {
                "name": "request_title",
                "value": "test",
                "type": "str"
            },
            {
                "name": "request_body",
                "value": "test",
                "type": "str"
            },
            {
                "name": "send_notification",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 330,
        "y": 900,
        "wires": [
            [
                "8ef367f1c6482028"
            ],
            [
                "8ef367f1c6482028"
            ],
            [
                "8ef367f1c6482028"
            ]
        ]
    },
    {
        "id": "30e6e9aa8d1afa68",
        "type": "inject",
        "z": "c1216b540b10bca8",
        "name": "auto inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 130,
        "y": 900,
        "wires": [
            [
                "71c904177b6b7b7f"
            ]
        ]
    },
    {
        "id": "8ef367f1c6482028",
        "type": "debug",
        "z": "c1216b540b10bca8",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 900,
        "wires": []
    },
    {
        "id": "9cbddfaa64847ffe",
        "type": "exec",
        "z": "c1216b540b10bca8",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 550,
        "y": 1220,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "6dc2084f378553f9",
        "type": "function",
        "z": "c1216b540b10bca8",
        "name": "function 1",
        "func": "// Get the current time\nlet time = new Date();\n\n// Subtract 10 minutes (600,000 milliseconds)\ntime.setMinutes(time.getMinutes() - 20);\n\n\nmsg.payload = `influx delete --org ${env.get(\"organization\") } --bucket readings --start '1970-01-01T00:00:00Z' --stop '${time.toISOString()}' --predicate '_measurement=\"downsampled\" AND downsampling=\"1m\"'` \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1220,
        "wires": [
            [
                "9cbddfaa64847ffe"
            ]
        ]
    },
    {
        "id": "e74422c34c1bc493",
        "type": "inject",
        "z": "c1216b540b10bca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 1220,
        "wires": [
            [
                "6dc2084f378553f9"
            ]
        ]
    },
    {
        "id": "c74604d429b25227",
        "type": "inject",
        "z": "c1216b540b10bca8",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "f42afe406b75fc63",
        "type": "debug",
        "z": "c1216b540b10bca8",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1300,
        "wires": []
    },
    {
        "id": "f069259ff93a9f1e",
        "type": "function",
        "z": "c1216b540b10bca8",
        "name": "function 3",
        "func": "let every = \"1m\"; // For example, 10 minutes ago\nlet measurement_input = \"raw\"; // Measurement name\nlet measurement_output = \"downsampled\"; // New measurement name\nlet downsampling_interval = \"1m\"; // Downsampling interval\nlet bucket_name = \"readings\"; \n\nmsg.query = `\noption task = {name: \"downsample_1min_last\", every: ${every}, offset: 1m}\n\nfrom(bucket: \"${bucket_name}\")\n    |> range(start: -${every})\n    |> filter(fn: (r) => r._measurement == \"${measurement_output}\")\n    |> aggregateWindow(every: ${downsampling_interval}, fn: last, createEmpty: false)\n    |> set(key: \"_measurement\", value: \"${measurement_input}\")\n    |> set(key: \"downsampling\", value: \"${downsampling_interval}\")\n    |> to(bucket: \"${bucket_name}\")`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1300,
        "wires": [
            [
                "68ee17bb03c5af45"
            ]
        ]
    },
    {
        "id": "68ee17bb03c5af45",
        "type": "influxdb in",
        "z": "c1216b540b10bca8",
        "influxdb": "bb1f05320e11b457",
        "name": "1m",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "${organization}",
        "x": 550,
        "y": 1300,
        "wires": [
            [
                "f42afe406b75fc63"
            ]
        ]
    },
    {
        "id": "b6e576c423d17e0e",
        "type": "ui-table",
        "z": "ee81bdc633abbb7c",
        "g": "93e67b0b85b043db",
        "group": "efa0a5cde6efba18",
        "name": "",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": false,
        "showSearch": false,
        "selectionType": "none",
        "columns": [
            {
                "title": "Device Name",
                "key": "device_name",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "IP address",
                "key": "ip_address",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "MAC address",
                "key": "mac_address",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Sensors",
                "key": "sensors",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Ping device",
                "key": "test_connection",
                "keyType": "str",
                "type": "button",
                "width": "",
                "align": "center"
            },
            {
                "title": "Online",
                "key": "color",
                "keyType": "key",
                "type": "color",
                "width": "",
                "align": "start"
            },
            {
                "title": "Delete",
                "key": "delete",
                "keyType": "str",
                "type": "button",
                "width": "",
                "align": "start"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "replace",
        "x": 1090,
        "y": 760,
        "wires": [
            [
                "2bab0d35542d4c97",
                "f7b02a75715d89c7"
            ]
        ]
    },
    {
        "id": "47aa2548892ad64b",
        "type": "influxdb in",
        "z": "ee81bdc633abbb7c",
        "g": "93e67b0b85b043db",
        "influxdb": "bb1f05320e11b457",
        "name": "get device name list",
        "query": "from(bucket: \"devices\")\n  |> range(start: -inf)\n  |> filter(fn: (r) => r._measurement == \"devices_info\")\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "${organization}",
        "x": 680,
        "y": 760,
        "wires": [
            [
                "6262935c1e644e12"
            ]
        ]
    },
    {
        "id": "2bab0d35542d4c97",
        "type": "switch",
        "z": "ee81bdc633abbb7c",
        "g": "93e67b0b85b043db",
        "name": "if button press",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "button_click",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1260,
        "y": 760,
        "wires": [
            [
                "2ca8d64e539640d4"
            ]
        ]
    },
    {
        "id": "6262935c1e644e12",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "93e67b0b85b043db",
        "name": "ping query",
        "func": "\nfor (let i = 0; i < msg.payload.length; i++) {\n\n    if (msg.ip && msg.payload[i].ip_address == msg.ip) {\n        if (msg.ip_status == \"loading\")\n            msg.payload[i].color = \"Lightgray\"\n        else if (msg.ip_status == \"up\")\n            msg.payload[i].color = \"green\"\n        else if (msg.ip_status == \"down\")\n            msg.payload[i].color = \"red\"\n    }\n\n}\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 760,
        "wires": [
            [
                "b6e576c423d17e0e"
            ]
        ]
    },
    {
        "id": "c53fe9c78fbecbb5",
        "type": "link in",
        "z": "ee81bdc633abbb7c",
        "g": "93e67b0b85b043db",
        "name": "link in 1",
        "links": [
            "72c4ae743e0ca41e",
            "3ba075ea10e47e4c",
            "8fbf7e5a85b9c656"
        ],
        "x": 535,
        "y": 720,
        "wires": [
            [
                "47aa2548892ad64b"
            ]
        ]
    },
    {
        "id": "414af9307474f2a1",
        "type": "ui-table",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "group": "129cfd06b8f0127b",
        "name": "",
        "label": "",
        "order": 4,
        "width": 0,
        "height": 0,
        "maxrows": "25",
        "passthru": false,
        "autocols": false,
        "showSearch": true,
        "selectionType": "none",
        "columns": [
            {
                "title": "Time",
                "key": "_time",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Log Level",
                "key": "level",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Device Name",
                "key": "device_name",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Function",
                "key": "function",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Message",
                "key": "_value",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "replace",
        "x": 1830,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "82147f80b2c75522",
        "type": "influxdb in",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "influxdb": "bb1f05320e11b457",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "${organization}",
        "x": 1640,
        "y": 1020,
        "wires": [
            [
                "414af9307474f2a1",
                "987937d9ea360e06"
            ]
        ]
    },
    {
        "id": "391ae12ed4a7b0e2",
        "type": "ui-dropdown",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "group": "129cfd06b8f0127b",
        "name": "",
        "label": "Select Device",
        "tooltip": "",
        "order": 1,
        "width": "6",
        "height": "1",
        "passthru": false,
        "multiple": true,
        "chips": true,
        "clearable": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "devices",
        "topicType": "str",
        "className": "",
        "typeIsComboBox": true,
        "msgTrigger": "onChange",
        "x": 1100,
        "y": 1080,
        "wires": [
            [
                "9d93ccae9a87a8cb"
            ]
        ]
    },
    {
        "id": "deb89b962cb09b1f",
        "type": "influxdb in",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "influxdb": "bb1f05320e11b457",
        "name": "",
        "query": "from(bucket: \"devices\")\n  |> range(start: -inf)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"devices_info\")\n  |> filter(fn: (r) => r[\"_field\"] == \"device_name\")\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "${organization}",
        "x": 640,
        "y": 1080,
        "wires": [
            [
                "2fcc0687bdb5d803",
                "100a9cce790400d9"
            ]
        ]
    },
    {
        "id": "2fcc0687bdb5d803",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "name": "populate dropdown list\\n + set default",
        "func": "msg.options = []\nfor (let i = 0; i < msg.payload.length; i++) {\n    msg.options[i] = msg.payload[i].device_name\n}\n\nmsg.topic = \"devices\"\nlet default_value = flow.get(\"devices\")\nif (default_value == null || default_value == undefined)\n   default_value = msg.options\n\nmsg.payload = default_value\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1080,
        "wires": [
            [
                "391ae12ed4a7b0e2",
                "ee31fc11feb98c6f"
            ]
        ]
    },
    {
        "id": "7abd6b45c1dbde94",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "name": "query",
        "func": "let bucket = \"devices\";  \nlet measurement = \"devices_logs\"; \nlet devices = msg.payload.devices;\nlet log_levels = msg.payload.log_levels;\nlet limit = msg.payload.limit;\n\nif (devices && devices.length > 0 && log_levels && log_levels.length > 0) {\n    let fluxQuery = `from(bucket: \"${bucket}\")\\n  |> range(start: -inf)`;  // Base query with bucket defined\n    \n    // Add measurement filter\n    fluxQuery += `\\n  |> filter(fn: (r) => r._measurement == \"${measurement}\")`;\n\n    // Add device filters\n    fluxQuery += `\\n  |> filter(fn: (r) => `;\n    for (let i = 0; i < devices.length; i++) {\n        if (i > 0) { fluxQuery += \" or \"; }\n        fluxQuery += `r.device_name == \"${devices[i]}\"`;\n    }\n    fluxQuery += `)`;\n\n    // Add log level filters\n    fluxQuery += `\\n  |> filter(fn: (r) => `;\n    for (let i = 0; i < log_levels.length; i++) {\n        if (i > 0) { fluxQuery += \" or \"; }\n        fluxQuery += `r.level == \"${log_levels[i]}\"`;\n    }\n    fluxQuery += `)`;\n\n    //join all tables\n    fluxQuery += `\\n  |> group(columns: [])`;\n\n\n    // Sort by time descending\n    fluxQuery += `\\n  |> sort(columns: [\"_time\"], desc: true)`;\n\n    // Add the limit\n    fluxQuery += `\\n  |> limit(n: ${limit || 50})`;  // Default limit to 50 if not provided\n    \n    // Set the generated query as the query\n    msg.query = fluxQuery;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 1020,
        "wires": [
            [
                "82147f80b2c75522",
                "5e680a35797c35f1"
            ]
        ]
    },
    {
        "id": "b146011714b99278",
        "type": "ui-dropdown",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "group": "129cfd06b8f0127b",
        "name": "",
        "label": "Log level",
        "tooltip": "",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": false,
        "multiple": true,
        "chips": true,
        "clearable": false,
        "options": [
            {
                "label": "Debug",
                "value": "debug",
                "type": "str"
            },
            {
                "label": "Error",
                "value": "error",
                "type": "str"
            },
            {
                "label": "Warn",
                "value": "warn",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "log_levels",
        "topicType": "str",
        "className": "",
        "typeIsComboBox": true,
        "msgTrigger": "onChange",
        "x": 1120,
        "y": 1020,
        "wires": [
            [
                "9d93ccae9a87a8cb"
            ]
        ]
    },
    {
        "id": "f615aafcb596a09f",
        "type": "ui-dropdown",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "group": "129cfd06b8f0127b",
        "name": "",
        "label": "Limit",
        "tooltip": "",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [
            {
                "label": "10 messages",
                "value": 10,
                "type": "num"
            },
            {
                "label": "25 messages",
                "value": 25,
                "type": "num"
            },
            {
                "label": "50 messages",
                "value": 50,
                "type": "num"
            },
            {
                "label": "100 messages",
                "value": 100,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "limit",
        "topicType": "str",
        "className": "",
        "typeIsComboBox": false,
        "msgTrigger": "onChange",
        "x": 1130,
        "y": 980,
        "wires": [
            [
                "9d93ccae9a87a8cb"
            ]
        ]
    },
    {
        "id": "9d93ccae9a87a8cb",
        "type": "join",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1290,
        "y": 1020,
        "wires": [
            [
                "7abd6b45c1dbde94",
                "31775a8d2966e405",
                "4e4e1632513b4d63"
            ]
        ]
    },
    {
        "id": "0c0c1e6d64962996",
        "type": "ui-control",
        "z": "ee81bdc633abbb7c",
        "name": "on page load",
        "ui": "589dd8c960567a01",
        "events": "change",
        "x": 130,
        "y": 900,
        "wires": [
            [
                "f3098a2acd6904f9"
            ]
        ]
    },
    {
        "id": "f3098a2acd6904f9",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "name": "if page is annotations",
        "func": "if (msg.payload == \"change\" && msg.name == \"Devices\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 900,
        "wires": [
            [
                "4ac5b25054f597d1",
                "d8902c387ec08295"
            ]
        ]
    },
    {
        "id": "9ab1c98b857bccdb",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "name": "set default",
        "func": "msg.topic = \"log_levels\"\n\nlet default_value = flow.get(\"log_levels\")\nif (default_value == null || default_value == undefined)\n    default_value = [\"debug\", \"error\", \"warn\"]\n    \nmsg.payload = default_value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1020,
        "wires": [
            [
                "b146011714b99278",
                "9d93ccae9a87a8cb",
                "ee31fc11feb98c6f"
            ]
        ]
    },
    {
        "id": "b572cca0a6301eb6",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "name": "set default",
        "func": "msg.topic = \"limit\"\n\nlet default_value = flow.get(\"limit\")\nif (default_value == null || default_value == undefined)\n    default_value = 50\nmsg.payload = default_value\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 980,
        "wires": [
            [
                "f615aafcb596a09f",
                "ee31fc11feb98c6f"
            ]
        ]
    },
    {
        "id": "5e680a35797c35f1",
        "type": "debug",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "name": "print query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "query",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1060,
        "wires": []
    },
    {
        "id": "4d349e0150b2b9c7",
        "type": "comment",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "name": "Do not remove double wires",
        "info": "these are wired directly because ui-dropdown does not send a msg when being selected programmatically",
        "x": 1120,
        "y": 1160,
        "wires": []
    },
    {
        "id": "31775a8d2966e405",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "name": "set default",
        "func": "flow.set(\"devices\", msg.payload.devices)\nflow.set(\"log_levels\", msg.payload.log_levels)\nflow.set(\"limit\", msg.payload.limit)\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "b24b816177f26408",
        "type": "ui-control",
        "z": "ee81bdc633abbb7c",
        "g": "d882671d10d4cb66",
        "name": "",
        "ui": "589dd8c960567a01",
        "events": "all",
        "x": 1860,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "207b284ba2406f6f",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "d882671d10d4cb66",
        "name": "show dialog box",
        "func": "msg.payload = {\n    groups: {\n        show: ['Devices:Delete device?'],\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 820,
        "wires": [
            [
                "b24b816177f26408"
            ]
        ]
    },
    {
        "id": "3a160629b930d6d6",
        "type": "ui-button",
        "z": "ee81bdc633abbb7c",
        "g": "d882671d10d4cb66",
        "group": "765c042561b97c3d",
        "name": "",
        "label": "Confirm",
        "order": 1,
        "width": "0",
        "height": "0",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 1860,
        "y": 860,
        "wires": [
            [
                "c3b2aef9a78e6123",
                "c1e8cdf8acd8fac9"
            ]
        ]
    },
    {
        "id": "100a9cce790400d9",
        "type": "debug",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1200,
        "wires": []
    },
    {
        "id": "4e4e1632513b4d63",
        "type": "debug",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1300,
        "wires": []
    },
    {
        "id": "987937d9ea360e06",
        "type": "debug",
        "z": "ee81bdc633abbb7c",
        "g": "6ee0f2ea30d16015",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1860,
        "y": 1120,
        "wires": []
    },
    {
        "id": "f7b02a75715d89c7",
        "type": "debug",
        "z": "ee81bdc633abbb7c",
        "g": "93e67b0b85b043db",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 660,
        "wires": []
    },
    {
        "id": "2ca8d64e539640d4",
        "type": "switch",
        "z": "ee81bdc633abbb7c",
        "g": "93e67b0b85b043db",
        "name": "",
        "property": "column",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "test_connection",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1430,
        "y": 760,
        "wires": [
            [
                "0b07ac6e6a6011c1",
                "a08310a7497b1be0"
            ],
            [
                "207b284ba2406f6f",
                "758066b4c68477e3"
            ]
        ]
    },
    {
        "id": "0b07ac6e6a6011c1",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "1d1fafd1b71a623e",
        "name": "ip status \"loading\"",
        "func": "\nmsg.ip = msg.payload.ip_address\nmsg.ip_status = \"loading\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 640,
        "wires": [
            [
                "72c4ae743e0ca41e"
            ]
        ]
    },
    {
        "id": "fa11bde20c28b2aa",
        "type": "exec",
        "z": "ee81bdc633abbb7c",
        "g": "1d1fafd1b71a623e",
        "command": "",
        "addpay": "query",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "ping once",
        "x": 1840,
        "y": 700,
        "wires": [
            [
                "18b19fbea247bf9d"
            ],
            [],
            []
        ]
    },
    {
        "id": "8c437da80f926e1f",
        "type": "change",
        "z": "ee81bdc633abbb7c",
        "g": "1d1fafd1b71a623e",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "query",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2270,
        "y": 700,
        "wires": [
            [
                "3ba075ea10e47e4c"
            ]
        ]
    },
    {
        "id": "18b19fbea247bf9d",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "1d1fafd1b71a623e",
        "name": "ip status \"up\" or \"down\"",
        "func": "msg.ip_status = msg.payload.trim()\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 700,
        "wires": [
            [
                "8c437da80f926e1f"
            ]
        ]
    },
    {
        "id": "72c4ae743e0ca41e",
        "type": "link out",
        "z": "ee81bdc633abbb7c",
        "g": "1d1fafd1b71a623e",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "c53fe9c78fbecbb5"
        ],
        "x": 1875,
        "y": 640,
        "wires": []
    },
    {
        "id": "3ba075ea10e47e4c",
        "type": "link out",
        "z": "ee81bdc633abbb7c",
        "g": "1d1fafd1b71a623e",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "c53fe9c78fbecbb5"
        ],
        "x": 2395,
        "y": 700,
        "wires": []
    },
    {
        "id": "a08310a7497b1be0",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "1d1fafd1b71a623e",
        "name": "ping query",
        "func": "let timeout = \"1\" //seconds\nmsg.ip = msg.payload.ip_address\nmsg.query = \"ping -c 1 -W \" + timeout + \" \" + msg.ip + \" &> /dev/null && echo \\\"up\\\" || echo \\\"down\\\"\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 700,
        "wires": [
            [
                "fa11bde20c28b2aa"
            ]
        ]
    },
    {
        "id": "a52667df0de6d124",
        "type": "exec",
        "z": "ee81bdc633abbb7c",
        "g": "d882671d10d4cb66",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 2370,
        "y": 840,
        "wires": [
            [
                "4543bd88333bcea0",
                "8fbf7e5a85b9c656",
                "5cd941b378bbb25e"
            ],
            [
                "4543bd88333bcea0",
                "8fbf7e5a85b9c656",
                "5cd941b378bbb25e"
            ],
            []
        ]
    },
    {
        "id": "c3b2aef9a78e6123",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "d882671d10d4cb66",
        "name": "delete from devices_info",
        "func": "let bucket = \"devices\";\nlet org = \"bubli\";\nlet measurement = \"devices_info\"\nlet start = \"1970-01-01T00:00:00Z\"; // From the beginning of time\nlet stop = new Date().toISOString();  // To Current timestamp\nlet mac_address = msg.mac_address\n\n// Generate the full query string\nmsg.payload = `influx delete \\\\\n  --bucket ${bucket} \\\\\n  --org ${org} \\\\\n  --start \"${start}\" \\\\\n  --stop \"${stop}\" \\\\\n  --predicate '_measurement=\"${measurement}\" AND mac_address = \"${mac_address}\" '`;\n\n\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 820,
        "wires": [
            [
                "a52667df0de6d124",
                "5cd941b378bbb25e"
            ]
        ]
    },
    {
        "id": "c1e8cdf8acd8fac9",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "d882671d10d4cb66",
        "name": "delete from devices_connections",
        "func": "let bucket = \"devices\";\nlet org = \"bubli\";\nlet measurement = \"devices_connections\"\nlet start = \"1970-01-01T00:00:00Z\"; // From the beginning of time\nlet stop = new Date().toISOString();  // To Current timestamp\nlet mac_address = msg.mac_address\n\n// Generate the full query string\nmsg.payload = `influx delete \\\\\n  --bucket ${bucket} \\\\\n  --org ${org} \\\\\n  --start \"${start}\" \\\\\n  --stop \"${stop}\" \\\\\n  --predicate '_measurement=\"${measurement}\" AND mac_address = \"${mac_address}\" '`;\n\n//  --predicate '_measurement=\"${measurement}\" AND device_name = \"${device_name}\"'`;\n\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 860,
        "wires": [
            [
                "a52667df0de6d124",
                "5cd941b378bbb25e"
            ]
        ]
    },
    {
        "id": "8fbf7e5a85b9c656",
        "type": "link out",
        "z": "ee81bdc633abbb7c",
        "g": "d882671d10d4cb66",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "c53fe9c78fbecbb5"
        ],
        "x": 2495,
        "y": 880,
        "wires": []
    },
    {
        "id": "4543bd88333bcea0",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "d882671d10d4cb66",
        "name": "hide dialog box",
        "func": "msg.payload = {\n    groups: {\n        hide: ['Devices:Delete device?'],\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 840,
        "wires": [
            [
                "556088067bcb5e5c"
            ]
        ]
    },
    {
        "id": "758066b4c68477e3",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "d882671d10d4cb66",
        "name": "function 2",
        "func": "msg.mac_address = msg.payload.mac_address\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 860,
        "wires": [
            [
                "3a160629b930d6d6"
            ]
        ]
    },
    {
        "id": "556088067bcb5e5c",
        "type": "ui-control",
        "z": "ee81bdc633abbb7c",
        "g": "d882671d10d4cb66",
        "name": "",
        "ui": "589dd8c960567a01",
        "events": "all",
        "x": 2720,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "da4034565cb6548f",
        "type": "influxdb out",
        "z": "ee81bdc633abbb7c",
        "g": "3965434fb20845d9",
        "influxdb": "bb1f05320e11b457",
        "name": "",
        "measurement": "devices_logs",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "${organization}",
        "bucket": "devices",
        "x": 480,
        "y": 80,
        "wires": []
    },
    {
        "id": "1816f4a39a202381",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "3965434fb20845d9",
        "name": "format for influx db",
        "func": "\nmsg.payload = [\n    {\n        \"message\":  msg.payload.message\n    },\n    {\n        \"level\": msg.payload.level ,\n        \"device_name\" : msg.payload.device_name,\n        \"function\": msg.payload.function\n    }\n]\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 80,
        "wires": [
            [
                "da4034565cb6548f"
            ]
        ]
    },
    {
        "id": "721c38e0e6168b7e",
        "type": "mqtt in",
        "z": "ee81bdc633abbb7c",
        "g": "3965434fb20845d9",
        "name": "",
        "topic": "/log",
        "qos": "1",
        "datatype": "json",
        "broker": "76494be814e2c42d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 80,
        "wires": [
            [
                "1816f4a39a202381",
                "8de1c3816c0fdfa8"
            ]
        ]
    },
    {
        "id": "8de1c3816c0fdfa8",
        "type": "debug",
        "z": "ee81bdc633abbb7c",
        "g": "3965434fb20845d9",
        "name": "print log",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 120,
        "wires": []
    },
    {
        "id": "e23f4ae0f68d854f",
        "type": "mqtt in",
        "z": "ee81bdc633abbb7c",
        "g": "b602bb0b116a7644",
        "name": "",
        "topic": "/register_device",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "76494be814e2c42d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 240,
        "wires": [
            [
                "9f2cb4747a2f23b3"
            ]
        ]
    },
    {
        "id": "9c3c90def5d0b0df",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "b602bb0b116a7644",
        "name": "fake device",
        "func": "msg.payload = {\n    \"device_name\": \"TEST_DEVICE_99\",\n    \"mac_address\": \"00:00:00:00:00:00\",\n    \"ip_address\": \"192.168.178.100\",\n    \"sensors\": [{ \"sensor_name\": \"test_sensor\", \"readings\": [{ \"type\": \"test\", \"value\": null, \"unit\": \"unit\" }] }] }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 300,
        "wires": [
            [
                "9f2cb4747a2f23b3"
            ]
        ]
    },
    {
        "id": "5f51e264d572954c",
        "type": "inject",
        "z": "ee81bdc633abbb7c",
        "g": "b602bb0b116a7644",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "9c3c90def5d0b0df"
            ]
        ]
    },
    {
        "id": "c41f06f648f27de2",
        "type": "influxdb in",
        "z": "ee81bdc633abbb7c",
        "g": "2571277fd6cbec46",
        "influxdb": "bb1f05320e11b457",
        "name": "",
        "query": "from(bucket: \"devices\")\n  |> range(start: -inf)\n  |> filter(fn: (r) => r._measurement == \"devices_info\")\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "${organization}",
        "x": 320,
        "y": 460,
        "wires": [
            [
                "7c1c8254453be3ab"
            ]
        ]
    },
    {
        "id": "6266358aa74a06d2",
        "type": "inject",
        "z": "ee81bdc633abbb7c",
        "g": "2571277fd6cbec46",
        "name": "ping devices",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "c41f06f648f27de2"
            ]
        ]
    },
    {
        "id": "2183da352f4f327e",
        "type": "subflow:359c38d245e1747d",
        "z": "ee81bdc633abbb7c",
        "g": "2571277fd6cbec46",
        "name": "",
        "env": [
            {
                "name": "max_failed_ping",
                "value": "3",
                "type": "num"
            },
            {
                "name": "max_response_time",
                "value": "2",
                "type": "num"
            }
        ],
        "x": 810,
        "y": 460,
        "wires": [
            [
                "555c459240d9662f",
                "8207ba428040e831"
            ]
        ]
    },
    {
        "id": "a944c7b7bc78a88d",
        "type": "inject",
        "z": "ee81bdc633abbb7c",
        "g": "2571277fd6cbec46",
        "name": "reset",
        "props": [
            {
                "p": "reset",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "x": 790,
        "y": 420,
        "wires": [
            [
                "2183da352f4f327e"
            ]
        ]
    },
    {
        "id": "7c1c8254453be3ab",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "2571277fd6cbec46",
        "name": "each device a different message",
        "func": "\nvar msgs = [];\nfor (let i = 0; i < msg.payload.length; i++) {\n    msgs[i] = {\n        device_info: msg.payload[i],\n        ip: msg.payload[i].ip_address\n    }\n}\nreturn [msgs];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 460,
        "wires": [
            [
                "2183da352f4f327e"
            ]
        ]
    },
    {
        "id": "d44c280d8db4ac3e",
        "type": "debug",
        "z": "ee81bdc633abbb7c",
        "g": "2571277fd6cbec46",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 420,
        "wires": []
    },
    {
        "id": "555c459240d9662f",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "2571277fd6cbec46",
        "name": "format for influx",
        "func": "msg.payload = [\n    {\n        time: Date.now(),\n        status: msg.status\n    },\n    {   \n        device_name: msg.device_info.device_name,\n        ip_address: msg.device_info.ip_address, \n        mac_address: msg.device_info.mac_address\n    }\n]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 460,
        "wires": [
            [
                "ee1d9aa6362be3b7",
                "d44c280d8db4ac3e"
            ]
        ]
    },
    {
        "id": "ee1d9aa6362be3b7",
        "type": "influxdb out",
        "z": "ee81bdc633abbb7c",
        "g": "2571277fd6cbec46",
        "influxdb": "bb1f05320e11b457",
        "name": "",
        "measurement": "device_connections",
        "precision": "ms",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "${organization}",
        "bucket": "devices",
        "x": 1260,
        "y": 460,
        "wires": []
    },
    {
        "id": "8207ba428040e831",
        "type": "switch",
        "z": "ee81bdc633abbb7c",
        "g": "2571277fd6cbec46",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "down",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 990,
        "y": 520,
        "wires": [
            [
                "625d40dddc9ab3bd"
            ]
        ]
    },
    {
        "id": "3ab5996895465c92",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "2571277fd6cbec46",
        "name": "build message",
        "func": "msg.payload = {\n    \"content\": msg.payload,\n    \"type\": \"message\",\n    \"chatId\": env.get(\"telegram_chat_id\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 520,
        "wires": [
            [
                "a60ad0e2e057d250"
            ]
        ]
    },
    {
        "id": "625d40dddc9ab3bd",
        "type": "template",
        "z": "ee81bdc633abbb7c",
        "g": "2571277fd6cbec46",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "[Device Connection Error]\nDevice {{device_info.device_name}} is disconnected\n\nip: {{device_info.ip_address}}\nstatus: {{status}}",
        "output": "str",
        "x": 1120,
        "y": 520,
        "wires": [
            [
                "3ab5996895465c92"
            ]
        ]
    },
    {
        "id": "a60ad0e2e057d250",
        "type": "telegram sender",
        "z": "ee81bdc633abbb7c",
        "g": "2571277fd6cbec46",
        "name": "",
        "bot": "51c69c4af9504f77",
        "haserroroutput": true,
        "outputs": 2,
        "x": 1460,
        "y": 520,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "92b5a3d59faa98da",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "b602bb0b116a7644",
        "name": "format for influx db",
        "func": "let device_name = msg.payload.device_name\nlet mac_address = msg.payload.mac_address\nlet ip_address = msg.payload.ip_address\n\n//ignore readings value as we are only interested in the device metadata\nlet sensors = msg.payload.sensors\nif (sensors == undefined) { sensors = `{\"error\" : \"error\"}` }\nelse{\n  sensors.forEach(sensor => {\n    sensor.readings.forEach(reading => {\n      delete reading.value;\n    });\n  });\n}\n\n\n\nmsg.payload = [\n  {\n    \"device_name\": device_name,\n    \"ip_address\": ip_address,\n    \"sensors\": JSON.stringify(sensors)\n  },\n  {\n    \"mac_address\": mac_address\n  }\n]\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 300,
        "wires": [
            [
                "0a7c6021cb2af914"
            ]
        ]
    },
    {
        "id": "0a7c6021cb2af914",
        "type": "influxdb out",
        "z": "ee81bdc633abbb7c",
        "g": "b602bb0b116a7644",
        "influxdb": "bb1f05320e11b457",
        "name": "",
        "measurement": "devices_info",
        "precision": "ms",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "bubli",
        "bucket": "devices",
        "x": 980,
        "y": 300,
        "wires": []
    },
    {
        "id": "aab65bfad9e8a476",
        "type": "function",
        "z": "ee81bdc633abbb7c",
        "g": "b602bb0b116a7644",
        "name": "query delete previous",
        "func": "let org = \"bubli\";\nlet bucket = \"devices\";\nlet measurement = \"devices_info\";\nlet mac_address = msg.payload.mac_address;\nlet currentTime = new Date().toISOString();\n\nmsg.payload = `influx delete \\\\\n--org ${org} \\\\\n--bucket ${bucket} \\\\\n--predicate '_measurement=\"${measurement}\" AND mac_address=\"${mac_address}\"' \\\\\n--start \"1970-01-01T00:00:00Z\" \\\\\n--stop \"${currentTime}\"`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "7b8b9d786a0bea40"
            ]
        ]
    },
    {
        "id": "476646e7fe9a8dad",
        "type": "delay",
        "z": "ee81bdc633abbb7c",
        "g": "b602bb0b116a7644",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 570,
        "y": 300,
        "wires": [
            [
                "92b5a3d59faa98da"
            ]
        ]
    },
    {
        "id": "7b8b9d786a0bea40",
        "type": "exec",
        "z": "ee81bdc633abbb7c",
        "g": "b602bb0b116a7644",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 910,
        "y": 240,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "5cd941b378bbb25e",
        "type": "debug",
        "z": "ee81bdc633abbb7c",
        "g": "d882671d10d4cb66",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2500,
        "y": 780,
        "wires": []
    },
    {
        "id": "55f5da9779ded376",
        "type": "ui-number-input",
        "z": "d4a5412a5158fcee",
        "group": "0c4bd1e195876f89",
        "name": "water",
        "label": "Total Water in Litres",
        "order": 1,
        "width": "5",
        "height": "1",
        "topic": "water",
        "topicType": "str",
        "min": "1",
        "max": "1000",
        "step": 1,
        "tooltip": "",
        "passthru": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "icon": "water",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "default",
        "x": 710,
        "y": 100,
        "wires": [
            [
                "8261f328c4665432"
            ]
        ]
    },
    {
        "id": "8261f328c4665432",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "update total in all fert",
        "func": "let msgs = []\n\nglobal.set(\"water\", msg.payload)\n\nlet fertList = Object.keys(global.get(\"fert\"))\n\nfertList.forEach(function (element) {\n    var newmsg = {};\n    newmsg.target = element\n\n    //element is just fert name as string, we still need to get the full object from global variable\n    let current_fert = global.get(\"fert.\" + element) //get full object\n    let newConcentration = current_fert.concentration * global.get(\"water\") //recalculate values\n    let newConcentrationRounded = Math.round(newConcentration * 100) / 100\n    current_fert.total = newConcentrationRounded\n\n    msgs.push(newmsg)\n});\n\nreturn [msgs]\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 100,
        "wires": [
            [
                "bafd0b593d18691e",
                "ea5f2a1eec999031"
            ]
        ]
    },
    {
        "id": "9f0182c2bb3a4705",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "recalculate fert values",
        "func": "//target for link call node. its basically the fertilizer name\nmsg.target = msg.topic.split('.')[1]\nlet base = \"fert.\" + msg.target + \".\"  // for example, \"fert.bio_grow.\"\n\nlet key = msg.topic.split('.')[2] //for example \"concentration\"\n\n\n//update changed value\nglobal.set(base + key, msg.payload)\n\n//recalculate the other value\nif (key == \"concentration\") {\n\n    let newTotal = global.get(base + key) * global.get(\"water\")\n    let newTotalRounded = Math.round(newTotal * 100) / 100\n    global.set(base + \"total\", newTotalRounded)\n\n} else if (key == \"total\") {\n\n    let newConcentration = global.get(base + key) / global.get(\"water\")\n    let newConcentrationRounded = Math.round(newConcentration * 100) / 100\n    global.set(base + \"concentration\", newConcentrationRounded)\n\n}\n\n//delete payload to avoid confusion\nmsg.payload = null\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 500,
        "wires": [
            [
                "d33fdc0f05c63f60",
                "840fde519ad06029"
            ]
        ]
    },
    {
        "id": "d33fdc0f05c63f60",
        "type": "link call",
        "z": "d4a5412a5158fcee",
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "5",
        "x": 480,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "ea5f2a1eec999031",
        "type": "link call",
        "z": "d4a5412a5158fcee",
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "2",
        "x": 1160,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7df9b923d1afa994",
        "type": "change",
        "z": "d4a5412a5158fcee",
        "name": "set water default",
        "rules": [
            {
                "t": "set",
                "p": "water",
                "pt": "global",
                "to": "20",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "water",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 100,
        "wires": [
            [
                "55f5da9779ded376"
            ]
        ]
    },
    {
        "id": "547b34aa02c93081",
        "type": "comment",
        "z": "d4a5412a5158fcee",
        "name": "How to add fertilizer",
        "info": "To add fertilizer copy this block of code and \n- change the name of link in to the fertilizer name\n- add fertilizer in \"set fertilizer list\" after \"on first load\"\n- change position number in function block. it only affets the position in which is displayed in grafana annotation\n- update the dashboard. add a 5x2 group with the fertilizer widget inside. you can also order the display order in node red dashboard here\n\ndo not use spaces in the fertilizer name, use _ instead. for example \"bio_grow\" will become \"BIO GROW\"\n\n",
        "x": 150,
        "y": 580,
        "wires": []
    },
    {
        "id": "bafd0b593d18691e",
        "type": "debug",
        "z": "d4a5412a5158fcee",
        "name": "debug 37",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 140,
        "wires": []
    },
    {
        "id": "840fde519ad06029",
        "type": "debug",
        "z": "d4a5412a5158fcee",
        "name": "debug 38",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 540,
        "wires": []
    },
    {
        "id": "7c789a9e5733c24b",
        "type": "ui-text-input",
        "z": "d4a5412a5158fcee",
        "group": "76958db0ee85d0af",
        "name": "Notes",
        "label": "",
        "order": 1,
        "width": "12",
        "height": "6",
        "topic": "topic",
        "topicType": "msg",
        "mode": "textarea",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": false,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 710,
        "y": 220,
        "wires": [
            [
                "bacfc18cfd64489e"
            ]
        ]
    },
    {
        "id": "3eb1686c46bd5525",
        "type": "subflow:0bf4167d8ce8f656",
        "z": "d4a5412a5158fcee",
        "name": "",
        "env": [
            {
                "name": "group",
                "value": "c096121eeabcddc2",
                "type": "conf-type"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 400,
        "y": 860,
        "wires": [
            [
                "c7d26410be10442d"
            ]
        ]
    },
    {
        "id": "17077da9eebae1a6",
        "type": "link in",
        "z": "d4a5412a5158fcee",
        "name": "bio_bloom",
        "links": [],
        "x": 75,
        "y": 860,
        "wires": [
            [
                "61b70d5f24d01345",
                "66dc0ab0a8aab644"
            ]
        ]
    },
    {
        "id": "61b70d5f24d01345",
        "type": "debug",
        "z": "d4a5412a5158fcee",
        "name": "debug 40",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 820,
        "wires": []
    },
    {
        "id": "ab673e28b2c15d60",
        "type": "subflow:0bf4167d8ce8f656",
        "z": "d4a5412a5158fcee",
        "name": "",
        "env": [
            {
                "name": "group",
                "value": "0d072f0f7668de64",
                "type": "conf-type"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 400,
        "y": 760,
        "wires": [
            [
                "25eb641b7b005f4c"
            ]
        ]
    },
    {
        "id": "60e0026999e0b73d",
        "type": "link in",
        "z": "d4a5412a5158fcee",
        "name": "bio_grow",
        "links": [],
        "x": 75,
        "y": 760,
        "wires": [
            [
                "c2355fa3681ad154",
                "2f674b836a95ba09"
            ]
        ]
    },
    {
        "id": "c2355fa3681ad154",
        "type": "debug",
        "z": "d4a5412a5158fcee",
        "name": "debug 41",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 720,
        "wires": []
    },
    {
        "id": "4714ecf2461935c0",
        "type": "debug",
        "z": "d4a5412a5158fcee",
        "name": "debug 42",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 620,
        "wires": []
    },
    {
        "id": "a17a067412ce5a0e",
        "type": "subflow:0bf4167d8ce8f656",
        "z": "d4a5412a5158fcee",
        "name": "",
        "env": [
            {
                "name": "group",
                "value": "6738f2ac549b9dc9",
                "type": "conf-type"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 400,
        "y": 660,
        "wires": [
            [
                "ea1dba1f83ba48c5"
            ]
        ]
    },
    {
        "id": "4d05bf5ca39023fa",
        "type": "link in",
        "z": "d4a5412a5158fcee",
        "name": "regulator",
        "links": [],
        "x": 75,
        "y": 660,
        "wires": [
            [
                "4714ecf2461935c0",
                "36158f1d1b7be96a"
            ]
        ]
    },
    {
        "id": "cf065e4aa9843815",
        "type": "debug",
        "z": "d4a5412a5158fcee",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 920,
        "wires": []
    },
    {
        "id": "5f397c0d6db151ef",
        "type": "subflow:0bf4167d8ce8f656",
        "z": "d4a5412a5158fcee",
        "name": "",
        "env": [
            {
                "name": "group",
                "value": "b860343b6008fb71",
                "type": "conf-type"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 400,
        "y": 960,
        "wires": [
            [
                "972b5f8c61234a75"
            ]
        ]
    },
    {
        "id": "87be2e2b8d81c389",
        "type": "link in",
        "z": "d4a5412a5158fcee",
        "name": "top_max",
        "links": [],
        "x": 75,
        "y": 960,
        "wires": [
            [
                "cf065e4aa9843815",
                "efaac22d997edc78"
            ]
        ]
    },
    {
        "id": "894fe33ca9ac2fe9",
        "type": "debug",
        "z": "d4a5412a5158fcee",
        "name": "debug 44",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 1020,
        "wires": []
    },
    {
        "id": "9450ed583c554016",
        "type": "subflow:0bf4167d8ce8f656",
        "z": "d4a5412a5158fcee",
        "name": "",
        "env": [
            {
                "name": "group",
                "value": "5b190b0d450f3aa0",
                "type": "conf-type"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 400,
        "y": 1060,
        "wires": [
            [
                "bdbf12c37fcb5cb4"
            ]
        ]
    },
    {
        "id": "a10e5b732a40bb1b",
        "type": "link in",
        "z": "d4a5412a5158fcee",
        "name": "acti_vera",
        "links": [],
        "x": 75,
        "y": 1060,
        "wires": [
            [
                "894fe33ca9ac2fe9",
                "e84c65a3d44a96d4"
            ]
        ]
    },
    {
        "id": "a762c64bb51e35d0",
        "type": "debug",
        "z": "d4a5412a5158fcee",
        "name": "debug 45",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 1120,
        "wires": []
    },
    {
        "id": "a2b74969a9122fd3",
        "type": "subflow:0bf4167d8ce8f656",
        "z": "d4a5412a5158fcee",
        "name": "",
        "env": [
            {
                "name": "group",
                "value": "2833675fd8d489c7",
                "type": "conf-type"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 400,
        "y": 1160,
        "wires": [
            [
                "d08de29e7a00f8be"
            ]
        ]
    },
    {
        "id": "fa0ac5153e57b2fb",
        "type": "link in",
        "z": "d4a5412a5158fcee",
        "name": "bio_heaven",
        "links": [],
        "x": 75,
        "y": 1160,
        "wires": [
            [
                "a762c64bb51e35d0",
                "38622a9d488d0447"
            ]
        ]
    },
    {
        "id": "ea1dba1f83ba48c5",
        "type": "link out",
        "z": "d4a5412a5158fcee",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "1733d66a8439e701"
        ],
        "x": 525,
        "y": 660,
        "wires": []
    },
    {
        "id": "1733d66a8439e701",
        "type": "link in",
        "z": "d4a5412a5158fcee",
        "name": "recalculate fertilizer values",
        "links": [
            "25eb641b7b005f4c",
            "972b5f8c61234a75",
            "bdbf12c37fcb5cb4",
            "c7d26410be10442d",
            "d08de29e7a00f8be",
            "ea1dba1f83ba48c5"
        ],
        "x": 75,
        "y": 500,
        "wires": [
            [
                "9f0182c2bb3a4705"
            ]
        ]
    },
    {
        "id": "25eb641b7b005f4c",
        "type": "link out",
        "z": "d4a5412a5158fcee",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "1733d66a8439e701"
        ],
        "x": 525,
        "y": 760,
        "wires": []
    },
    {
        "id": "c7d26410be10442d",
        "type": "link out",
        "z": "d4a5412a5158fcee",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "1733d66a8439e701"
        ],
        "x": 525,
        "y": 860,
        "wires": []
    },
    {
        "id": "972b5f8c61234a75",
        "type": "link out",
        "z": "d4a5412a5158fcee",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "1733d66a8439e701"
        ],
        "x": 525,
        "y": 960,
        "wires": []
    },
    {
        "id": "bdbf12c37fcb5cb4",
        "type": "link out",
        "z": "d4a5412a5158fcee",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "1733d66a8439e701"
        ],
        "x": 525,
        "y": 1060,
        "wires": []
    },
    {
        "id": "d08de29e7a00f8be",
        "type": "link out",
        "z": "d4a5412a5158fcee",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "1733d66a8439e701"
        ],
        "x": 525,
        "y": 1160,
        "wires": []
    },
    {
        "id": "31e2486785c39b59",
        "type": "ui-button",
        "z": "d4a5412a5158fcee",
        "group": "76958db0ee85d0af",
        "name": "",
        "label": "Submit Irrigation Event",
        "order": 2,
        "width": "12",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": false,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": true,
        "pointerupPayload": "true",
        "pointerupPayloadType": "bool",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "6eb1bfac4a778d4e"
            ]
        ]
    },
    {
        "id": "3f20072c653f3928",
        "type": "change",
        "z": "d4a5412a5158fcee",
        "name": "build annotation payload",
        "rules": [
            {
                "t": "set",
                "p": "payload.time",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload.timeEnd",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload.tags",
                "pt": "msg",
                "to": "[\"Hand watering\"]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 420,
        "wires": [
            [
                "b8d2fa52f30cc99d"
            ]
        ]
    },
    {
        "id": "b8d2fa52f30cc99d",
        "type": "debug",
        "z": "d4a5412a5158fcee",
        "name": "debug 46",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 460,
        "wires": []
    },
    {
        "id": "8345fb2a16609305",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "build html message",
        "func": "function formatFert(data) {\n    // Sort the fertilizer data based on position and format into HTML paragraphs\n    return Object.entries(data)\n        .sort((a, b) => a[1].position - b[1].position)\n        .map(([key, value]) => {\n            const formattedKey = key.replace(/_/g, ' ').toUpperCase(); // Convert key to uppercase and replace underscores with spaces\n            return `<p>${formattedKey}: ${value.concentration}ml/L (${value.total}ml total)</p>`;\n        })\n        .join('\\n'); // Join all paragraphs with newline characters\n}\n\nfunction generateHTML() {\n    // Retrieve total water and pH values from global storage\n    const totalWater = `<p>TOTAL WATER: ${global.get(\"water\")}L </p>`;\n    const ph = `<p>PH: ${global.get(\"ph\")}</p>`;\n\n    // Format fertilizer data\n    const formattedFert = formatFert(global.get(\"fert\"));\n    \n    // Retrieve notes from global storage, only include if defined\n    const notes = global.get(\"notes\") !== undefined ? `<p>NOTES: <br/>${global.get(\"notes\")}</p>` : \"\";\n\n    // Construct and return the complete HTML structure\n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n</head>\n<body>\n${totalWater}\n${ph}\n${formattedFert}\n${notes}\n</body>\n</html>`;\n}\n\nmsg.payload = { text: generateHTML() };\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 420,
        "wires": [
            [
                "3f20072c653f3928"
            ]
        ]
    },
    {
        "id": "6eb1bfac4a778d4e",
        "type": "change",
        "z": "d4a5412a5158fcee",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"title\":\"Are you sure\",\"content\":\"Do you want to submit fertigation data to grafana?\",\"okText\":\"Submit\",\"cancelText\":\"Cancel\"}",
                "tot": "json"
            },
            {
                "t": "delete",
                "p": "_event",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 420,
        "wires": [
            [
                "0f05622112dc0d07"
            ]
        ]
    },
    {
        "id": "36158f1d1b7be96a",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "set position 1",
        "func": "let position = 1\nglobal.set(\"fert.\" + msg.target + \".position\", position)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 660,
        "wires": [
            [
                "a17a067412ce5a0e"
            ]
        ]
    },
    {
        "id": "2f674b836a95ba09",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "set position 2",
        "func": "let position = 2\nglobal.set(\"fert.\" + msg.target + \".position\", position)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 760,
        "wires": [
            [
                "ab673e28b2c15d60"
            ]
        ]
    },
    {
        "id": "66dc0ab0a8aab644",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "set position 3",
        "func": "let position = 3\nglobal.set(\"fert.\" + msg.target + \".position\", position)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 860,
        "wires": [
            [
                "3eb1686c46bd5525"
            ]
        ]
    },
    {
        "id": "efaac22d997edc78",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "set position 4",
        "func": "let position = 4\nglobal.set(\"fert.\" + msg.target + \".position\", position)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 960,
        "wires": [
            [
                "5f397c0d6db151ef"
            ]
        ]
    },
    {
        "id": "e84c65a3d44a96d4",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "set position 5",
        "func": "let position = 5\nglobal.set(\"fert.\" + msg.target + \".position\", position)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1060,
        "wires": [
            [
                "9450ed583c554016"
            ]
        ]
    },
    {
        "id": "38622a9d488d0447",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "set position 6",
        "func": "let position = 6\nglobal.set(\"fert.\" + msg.target + \".position\", position)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1160,
        "wires": [
            [
                "a2b74969a9122fd3"
            ]
        ]
    },
    {
        "id": "0f05622112dc0d07",
        "type": "ui-template",
        "z": "d4a5412a5158fcee",
        "group": "",
        "page": "",
        "ui": "589dd8c960567a01",
        "name": "OK/Cancel dialog",
        "order": 0,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<!-- \n  This pops up an OK/Cancel dialog when sent a payload of the form\n  {\n    title: \"dialog title\",\n    content: \"The text to display in the window\",\n    okText: \"OK\",         // optional, if not present defaults to OK\n    cancelText: \"Cancel\"   // optional, defaults to Cancel\n  }\n  All properties may contain embedded html tags such as <br/>\n  If msg._client is present and contains a socketId (as will be the case if the template is triggered\n  from another widget such as a button) then the popup will only appear on the matching session.\n  For example, if a button widget is fed into the template then the popup will appear only on the browser where the button\n  was clicked.\n  If msg._client is not present then the popup will appear on all connected browsers and will have to be acknowleged on each one.\n\n  When one of the buttons is clicked a message is sent with msg.payload containing the ok or cancel text\n-->\n<template>\n  <v-dialog width=\"auto\" v-model=\"showDialog\">\n    <v-card color=\"white\" v-click-outside=\"{handler: onClickOutside}\">\n      <v-toolbar color=\"primary\">\n        <v-card-title>\n          <span>{{title}}</span>\n        </v-card-title>\n      </v-toolbar>\n      <v-card-text>\n        <div class=\"text-h6\" v-html=\"content\"></div>\n      </v-card-text>\n      <v-card-actions class=\"justify-end\">\n        <v-btn variant=\"elevated\" size=\"large\" @click=\"cancelDialog\" v-html=\"cancelText\"></v-btn>\n        <v-btn variant=\"elevated\" size=\"large\" @click=\"okDialog\" v-html=\"okText\"></v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n        dialogData:null\n    }\n  },\n  watch: {\n      msg: function(){\n          // only show the dialog if msg.payload is an object and the socket id in the message\n          // matches our socket id (which means the popup was initiated from this session) or\n          // there is no _client property present which indicates it should be shown on all sessions.\n          if (typeof this.msg.payload === \"object\" && (!this.msg._client || this.msg._client.socketId === this.$socket.id)) {                  \n              this.dialogData = this.msg.payload;\n              if (!this.dialogData.okText) {\n                this.dialogData.okText = \"OK\"\n              }\n              if (!this.dialogData.cancelText) {\n                this.dialogData.cancelText = \"Cancel\"\n              }\n              this.dialogData.show = true\n          }\n          // prevent redraw on deploy\n          this.msg.payload = null\n      }\n  },\n  methods:{\n    okDialog:function(){\n      this.dialogData.show = false;\n      this.msg.payload = this.dialogData.okText\n      this.send(this.msg);\n    },\n    cancelDialog:function(){\n      this.dialogData.show = false;\n      this.msg.payload = this.dialogData.cancelText\n      this.send(this.msg);\n    },\n    onClickOutside () {\n      this.dialogData.show = false;\n      this.msg.payload = this.dialogData.cancelText\n      this.send(this.msg);\n    },\n  },\n  computed : {\n    title:function(){\n      return this.dialogData?.title ?? \"\"\n    },\n    content:function(){\n      return this.dialogData?.content ?? \"\"\n    },\n    okText:function(){\n      return this.dialogData?.okText ?? \"OK\"\n    },\n    cancelText:function(){\n      return this.dialogData?.cancelText ?? \"Cancel\"\n    },\n    showDialog: function (){\n      return this.dialogData?.show === true\n    }\n  },\n  unmounted () {\n    this.dialogData = null\n  }\n}\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "widget:ui",
        "className": "",
        "x": 550,
        "y": 420,
        "wires": [
            [
                "1f2dd7fc144b3c60"
            ]
        ]
    },
    {
        "id": "1f2dd7fc144b3c60",
        "type": "switch",
        "z": "d4a5412a5158fcee",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Submit",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 710,
        "y": 420,
        "wires": [
            [
                "8345fb2a16609305",
                "af0ac167f0b226c3",
                "9fba8672e491c555"
            ]
        ]
    },
    {
        "id": "486fe7a691fa719e",
        "type": "ui-number-input",
        "z": "d4a5412a5158fcee",
        "group": "3a145ef5ad38230e",
        "name": "ph",
        "label": "Final ph",
        "order": 1,
        "width": "5",
        "height": "1",
        "topic": "water",
        "topicType": "str",
        "min": "1",
        "max": "14",
        "step": "0.1",
        "tooltip": "",
        "passthru": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "icon": "mdi-eyedropper",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "default",
        "x": 710,
        "y": 160,
        "wires": [
            [
                "a64e99013d358324"
            ]
        ]
    },
    {
        "id": "cff12b12740cc7bc",
        "type": "change",
        "z": "d4a5412a5158fcee",
        "name": "set ph default",
        "rules": [
            {
                "t": "set",
                "p": "ph",
                "pt": "global",
                "to": "6.2",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ph",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 160,
        "wires": [
            [
                "486fe7a691fa719e"
            ]
        ]
    },
    {
        "id": "a64e99013d358324",
        "type": "change",
        "z": "d4a5412a5158fcee",
        "name": "set ph",
        "rules": [
            {
                "t": "set",
                "p": "ph",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "7bc3b89e997a1e4e",
        "type": "ui-control",
        "z": "d4a5412a5158fcee",
        "name": "go to home page",
        "ui": "589dd8c960567a01",
        "events": "change",
        "x": 1090,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "af0ac167f0b226c3",
        "type": "change",
        "z": "d4a5412a5158fcee",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Home Page",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 380,
        "wires": [
            [
                "7bc3b89e997a1e4e"
            ]
        ]
    },
    {
        "id": "0855e6e5a0de3d41",
        "type": "change",
        "z": "d4a5412a5158fcee",
        "name": "set notes",
        "rules": [
            {
                "t": "set",
                "p": "notes",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "bacfc18cfd64489e",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "replace new line with <br>",
        "func": "msg.payload = msg.payload.replace(/\\n/g, \"<br>\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 220,
        "wires": [
            [
                "0855e6e5a0de3d41"
            ]
        ]
    },
    {
        "id": "a502b7bd55ec8496",
        "type": "change",
        "z": "d4a5412a5158fcee",
        "name": "set notes default",
        "rules": [
            {
                "t": "set",
                "p": "notes",
                "pt": "global",
                "to": "\"\"",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "notes",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 220,
        "wires": [
            [
                "7c789a9e5733c24b"
            ]
        ]
    },
    {
        "id": "3ea903ab7c4c460a",
        "type": "ui-control",
        "z": "d4a5412a5158fcee",
        "name": "on page load",
        "ui": "589dd8c960567a01",
        "events": "change",
        "x": 90,
        "y": 200,
        "wires": [
            [
                "b67a01dbcce6ab03"
            ]
        ]
    },
    {
        "id": "b67a01dbcce6ab03",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "if page is annotations",
        "func": "if (msg.payload == \"change\" && msg.name == \"Annotations\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 200,
        "wires": [
            [
                "cff12b12740cc7bc",
                "a502b7bd55ec8496",
                "7df9b923d1afa994",
                "8fa00821d8c3dfc2"
            ]
        ]
    },
    {
        "id": "8fa00821d8c3dfc2",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "set fert concentration to default",
        "func": "let msgs = []\n\nif (global.get(\"fert\") == null || global.get(\"fert\") == undefined){\n    return\n}\n\nlet fertList = Object.keys(global.get(\"fert\"))\n\nfertList.forEach(function (element) {\n    var newmsg = {};\n    newmsg.target = element\n\n    //element is just fert name as string, we still need to get the full object from global variable\n    let current_fert = global.get(\"fert.\" + element) //get full object\n    \n    current_fert.concentration = current_fert.concentration_default\n\n    msgs.push(newmsg)\n});\n\nreturn [msgs]\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 280,
        "wires": [
            [
                "3814d4eb3829f358"
            ]
        ]
    },
    {
        "id": "9fba8672e491c555",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "update total in all fert",
        "func": "\nlet fertList = Object.keys(global.get(\"fert\"))\n\nfertList.forEach(function (element) {\n    //element is just fert name as string, we still need to get the full object from global variable\n    let current_fert = global.get(\"fert.\" + element) //get full object\n\n    current_fert.concentration_default = current_fert.concentration\n\n\n});\n\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "3814d4eb3829f358",
        "type": "link call",
        "z": "d4a5412a5158fcee",
        "name": "",
        "links": [],
        "linkType": "dynamic",
        "timeout": "5",
        "x": 780,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "96a129d353f8db50",
        "type": "comment",
        "z": "d4a5412a5158fcee",
        "name": "concentration default is last concentration submitted to grafana",
        "info": "",
        "x": 670,
        "y": 320,
        "wires": []
    },
    {
        "id": "15ad816525ec55ef",
        "type": "inject",
        "z": "d4a5412a5158fcee",
        "name": "on first load",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 40,
        "wires": [
            [
                "8619cab1b71eb9d7"
            ]
        ]
    },
    {
        "id": "8619cab1b71eb9d7",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "set fertlizer list",
        "func": "global.set(\"fert\", {\n    regulator: {},\n    bio_grow: {},\n    bio_bloom: {},\n    top_max: {},\n    acti_vera: {},\n    bio_heaven: {}\n})\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 40,
        "wires": [
            [
                "b692fc6743a303b2"
            ]
        ]
    },
    {
        "id": "b692fc6743a303b2",
        "type": "function",
        "z": "d4a5412a5158fcee",
        "name": "with dummy values",
        "func": "let fertList = Object.keys(global.get(\"fert\"))\n\nfertList.forEach(function (element) {\n\n    //element is just fert name as string, we still need to get the full object from global variable\n    let current_fert = global.get(\"fert.\" + element) //get full object\n    current_fert.concentration = 0\n    current_fert.concentration_default = 0\n    current_fert.total = 0\n    current_fert.position = -1\n});\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "38b546b07dad6ada",
        "type": "link in",
        "z": "676aeb444dcdd8d6",
        "name": "Notification flow",
        "links": [
            "3b43b3cca9abea55"
        ],
        "x": 105,
        "y": 60,
        "wires": [
            [
                "54eb8aaf15ec88d2",
                "d822f588030d5972",
                "3c09d9c26d5d365b",
                "8e913ae4cce2cb48"
            ]
        ]
    },
    {
        "id": "54eb8aaf15ec88d2",
        "type": "debug",
        "z": "676aeb444dcdd8d6",
        "name": "debug 48",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 120,
        "wires": []
    },
    {
        "id": "93d1c4a1539d4a7e",
        "type": "debug",
        "z": "676aeb444dcdd8d6",
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 120,
        "wires": []
    },
    {
        "id": "9a7bff1a41256b15",
        "type": "subflow:2420f75c4c01f1de",
        "z": "676aeb444dcdd8d6",
        "name": "",
        "env": [
            {
                "name": "min",
                "value": "40",
                "type": "num"
            },
            {
                "name": "max",
                "value": "60",
                "type": "num"
            },
            {
                "name": "title",
                "value": "HUMIDTY ALERT",
                "type": "str"
            }
        ],
        "x": 710,
        "y": 40,
        "wires": [
            [
                "a94405716db4f451"
            ]
        ]
    },
    {
        "id": "390d9a5e9ab4a008",
        "type": "subflow:2420f75c4c01f1de",
        "z": "676aeb444dcdd8d6",
        "name": "",
        "env": [
            {
                "name": "min",
                "value": "17",
                "type": "num"
            },
            {
                "name": "max",
                "value": "25",
                "type": "num"
            },
            {
                "name": "title",
                "value": "TEMPERATURE ALERT",
                "type": "str"
            }
        ],
        "x": 710,
        "y": 80,
        "wires": [
            [
                "a94405716db4f451"
            ]
        ]
    },
    {
        "id": "a94405716db4f451",
        "type": "change",
        "z": "676aeb444dcdd8d6",
        "name": "build telegram message",
        "rules": [
            {
                "t": "set",
                "p": "payload.content",
                "pt": "msg",
                "to": "result",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.chatId",
                "pt": "msg",
                "to": "1201591574",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "message",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 80,
        "wires": [
            [
                "b99b09ba7f5c2e94",
                "93d1c4a1539d4a7e"
            ]
        ]
    },
    {
        "id": "d822f588030d5972",
        "type": "subflow:780f7e06d7eb6c70",
        "z": "676aeb444dcdd8d6",
        "name": "if humidity",
        "env": [
            {
                "name": "device_name",
                "value": "TDR_THERMOHYGROMETER_MODULE",
                "type": "str"
            },
            {
                "name": "sensor_name",
                "value": "TempAndRh_Sensor",
                "type": "str"
            },
            {
                "name": "description",
                "value": "humidity",
                "type": "str"
            }
        ],
        "x": 490,
        "y": 40,
        "wires": [
            [
                "9a7bff1a41256b15"
            ]
        ]
    },
    {
        "id": "3c09d9c26d5d365b",
        "type": "subflow:780f7e06d7eb6c70",
        "z": "676aeb444dcdd8d6",
        "name": "if temp",
        "env": [
            {
                "name": "device_name",
                "value": "TDR_THERMOHYGROMETER_MODULE",
                "type": "str"
            },
            {
                "name": "sensor_name",
                "value": "TempAndRh_Sensor",
                "type": "str"
            },
            {
                "name": "description",
                "value": "temp",
                "type": "str"
            }
        ],
        "x": 510,
        "y": 80,
        "wires": [
            [
                "390d9a5e9ab4a008"
            ]
        ]
    },
    {
        "id": "7400fdf85dab1de0",
        "type": "ui-dropdown",
        "z": "676aeb444dcdd8d6",
        "group": "b2798c6899bf4cc1",
        "name": "",
        "label": "Select Option:",
        "tooltip": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "msgTrigger": "onChange",
        "x": 500,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "703953455746c732",
        "type": "inject",
        "z": "676aeb444dcdd8d6",
        "name": "",
        "props": [
            {
                "p": "options",
                "v": "[\"opt1\", \"opt2\"]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 240,
        "wires": [
            [
                "7400fdf85dab1de0"
            ]
        ]
    },
    {
        "id": "14b8f776d1c63232",
        "type": "subflow:2420f75c4c01f1de",
        "z": "676aeb444dcdd8d6",
        "name": "",
        "env": [
            {
                "name": "min",
                "value": "35",
                "type": "num"
            },
            {
                "name": "max",
                "value": "70",
                "type": "num"
            },
            {
                "name": "title",
                "value": "PLANT WATERING",
                "type": "str"
            },
            {
                "name": "subtitle_below",
                "value": "water level is too low!",
                "type": "str"
            },
            {
                "name": "subtitle_above",
                "value": "water level is too high!",
                "type": "str"
            }
        ],
        "x": 710,
        "y": 120,
        "wires": [
            [
                "a94405716db4f451"
            ]
        ]
    },
    {
        "id": "8e913ae4cce2cb48",
        "type": "subflow:780f7e06d7eb6c70",
        "z": "676aeb444dcdd8d6",
        "name": "if humidity",
        "env": [
            {
                "name": "device_name",
                "value": "TDR_THERMOHYGROMETER_MODULE",
                "type": "str"
            },
            {
                "name": "sensor_name",
                "value": "TDR_Sensor",
                "type": "str"
            },
            {
                "name": "description",
                "value": "soil_hum",
                "type": "str"
            }
        ],
        "x": 490,
        "y": 120,
        "wires": [
            [
                "14b8f776d1c63232"
            ]
        ]
    },
    {
        "id": "b99b09ba7f5c2e94",
        "type": "telegram sender",
        "z": "676aeb444dcdd8d6",
        "name": "",
        "bot": "51c69c4af9504f77",
        "haserroroutput": true,
        "outputs": 2,
        "x": 1220,
        "y": 60,
        "wires": [
            [],
            []
        ]
    }
]